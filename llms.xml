This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.cursor/
  rules/
    cursor_rules.mdc
    dev_workflow.mdc
    self_improve.mdc
    taskmaster.mdc
  mcp.json
.roo/
  rules/
    dev_workflow.md
    roo_rules.md
    self_improve.md
    taskmaster.md
  rules-architect/
    architect-rules
  rules-ask/
    ask-rules
  rules-boomerang/
    boomerang-rules
  rules-code/
    code-rules
  rules-debug/
    debug-rules
  rules-test/
    test-rules
public/
  favicon.svg
  vite.svg
scripts/
  example_prd.txt
  prd.txt
src/
  assets/
    vue.svg
  components/
    EmpireMap.vue
    HelloWorld.vue
  schemas/
    empireSchema.ts
  App.vue
  main.ts
  style.css
  vite-env.d.ts
.env.example
.gitignore
.roomodes
.taskmasterconfig
.windsurfrules
index.html
package.json
postcss.config.js
README.md
renovate.json
tailwind.config.js
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".cursor/rules/cursor_rules.mdc">
---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---

- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules
</file>

<file path=".cursor/rules/dev_workflow.mdc">
---
description: Guide for using Task Master to manage task-driven development workflows
globs: **/*
alwaysApply: true
---
# Task Master Development Workflow

This guide outlines the typical process for using Task Master to manage software development projects.

## Primary Interaction: MCP Server vs. CLI

Task Master offers two primary ways to interact:

1.  **MCP Server (Recommended for Integrated Tools)**:
    - For AI agents and integrated development environments (like Cursor), interacting via the **MCP server is the preferred method**.
    - The MCP server exposes Task Master functionality through a set of tools (e.g., `get_tasks`, `add_subtask`).
    - This method offers better performance, structured data exchange, and richer error handling compared to CLI parsing.
    - Refer to [`mcp.mdc`](mdc:.cursor/rules/mcp.mdc) for details on the MCP architecture and available tools.
    - A comprehensive list and description of MCP tools and their corresponding CLI commands can be found in [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc).
    - **Restart the MCP server** if core logic in `scripts/modules` or MCP tool/direct function definitions change.

2.  **`task-master` CLI (For Users & Fallback)**:
    - The global `task-master` command provides a user-friendly interface for direct terminal interaction.
    - It can also serve as a fallback if the MCP server is inaccessible or a specific function isn't exposed via MCP.
    - Install globally with `npm install -g task-master-ai` or use locally via `npx task-master-ai ...`.
    - The CLI commands often mirror the MCP tools (e.g., `task-master list` corresponds to `get_tasks`).
    - Refer to [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc) for a detailed command reference.

## Standard Development Workflow Process

-   Start new projects by running `initialize_project` tool / `task-master init` or `parse_prd` / `task-master parse-prd --input='<prd-file.txt>'` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to generate initial tasks.json
-   Begin coding sessions with `get_tasks` / `task-master list` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to see current tasks, status, and IDs
-   Determine the next task to work on using `next_task` / `task-master next` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
-   Analyze task complexity with `analyze_project_complexity` / `task-master analyze-complexity --research` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) before breaking down tasks
-   Review complexity report using `complexity_report` / `task-master complexity-report` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
-   Select tasks based on dependencies (all marked 'done'), priority level, and ID order
-   Clarify tasks by checking task files in tasks/ directory or asking for user input
-   View specific task details using `get_task` / `task-master show <id>` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to understand implementation requirements
-   Break down complex tasks using `expand_task` / `task-master expand --id=<id> --force --research` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) with appropriate flags like `--force` (to replace existing subtasks) and `--research`.
-   Clear existing subtasks if needed using `clear_subtasks` / `task-master clear-subtasks --id=<id>` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) before regenerating
-   Implement code following task details, dependencies, and project standards
-   Verify tasks according to test strategies before marking as complete (See [`tests.mdc`](mdc:.cursor/rules/tests.mdc))
-   Mark completed tasks with `set_task_status` / `task-master set-status --id=<id> --status=done` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc))
-   Update dependent tasks when implementation differs from original plan using `update` / `task-master update --from=<id> --prompt="..."` or `update_task` / `task-master update-task --id=<id> --prompt="..."` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc))
-   Add new tasks discovered during implementation using `add_task` / `task-master add-task --prompt="..." --research` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
-   Add new subtasks as needed using `add_subtask` / `task-master add-subtask --parent=<id> --title="..."` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
-   Append notes or details to subtasks using `update_subtask` / `task-master update-subtask --id=<subtaskId> --prompt='Add implementation notes here...\nMore details...'` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)).
-   Generate task files with `generate` / `task-master generate` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) after updating tasks.json
-   Maintain valid dependency structure with `add_dependency`/`remove_dependency` tools or `task-master add-dependency`/`remove-dependency` commands, `validate_dependencies` / `task-master validate-dependencies`, and `fix_dependencies` / `task-master fix-dependencies` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) when needed
-   Respect dependency chains and task priorities when selecting work
-   Report progress regularly using `get_tasks` / `task-master list`

## Task Complexity Analysis

-   Run `analyze_project_complexity` / `task-master analyze-complexity --research` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) for comprehensive analysis
-   Review complexity report via `complexity_report` / `task-master complexity-report` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) for a formatted, readable version.
-   Focus on tasks with highest complexity scores (8-10) for detailed breakdown
-   Use analysis results to determine appropriate subtask allocation
-   Note that reports are automatically used by the `expand_task` tool/command

## Task Breakdown Process

-   Use `expand_task` / `task-master expand --id=<id>`. It automatically uses the complexity report if found, otherwise generates default number of subtasks.
-   Use `--num=<number>` to specify an explicit number of subtasks, overriding defaults or complexity report recommendations.
-   Add `--research` flag to leverage Perplexity AI for research-backed expansion.
-   Add `--force` flag to clear existing subtasks before generating new ones (default is to append).
-   Use `--prompt="<context>"` to provide additional context when needed.
-   Review and adjust generated subtasks as necessary.
-   Use `expand_all` tool or `task-master expand --all` to expand multiple pending tasks at once, respecting flags like `--force` and `--research`.
-   If subtasks need complete replacement (regardless of the `--force` flag on `expand`), clear them first with `clear_subtasks` / `task-master clear-subtasks --id=<id>`.

## Implementation Drift Handling

-   When implementation differs significantly from planned approach
-   When future tasks need modification due to current implementation choices
-   When new dependencies or requirements emerge
-   Use `update` / `task-master update --from=<futureTaskId> --prompt='<explanation>\nUpdate context...' --research` to update multiple future tasks.
-   Use `update_task` / `task-master update-task --id=<taskId> --prompt='<explanation>\nUpdate context...' --research` to update a single specific task.

## Task Status Management

-   Use 'pending' for tasks ready to be worked on
-   Use 'done' for completed and verified tasks
-   Use 'deferred' for postponed tasks
-   Add custom status values as needed for project-specific workflows

## Task Structure Fields

- **id**: Unique identifier for the task (Example: `1`, `1.1`)
- **title**: Brief, descriptive title (Example: `"Initialize Repo"`)
- **description**: Concise summary of what the task involves (Example: `"Create a new repository, set up initial structure."`)
- **status**: Current state of the task (Example: `"pending"`, `"done"`, `"deferred"`)
- **dependencies**: IDs of prerequisite tasks (Example: `[1, 2.1]`)
    - Dependencies are displayed with status indicators (✅ for completed, ⏱️ for pending)
    - This helps quickly identify which prerequisite tasks are blocking work
- **priority**: Importance level (Example: `"high"`, `"medium"`, `"low"`)
- **details**: In-depth implementation instructions (Example: `"Use GitHub client ID/secret, handle callback, set session token."`) 
- **testStrategy**: Verification approach (Example: `"Deploy and call endpoint to confirm 'Hello World' response."`) 
- **subtasks**: List of smaller, more specific tasks (Example: `[{"id": 1, "title": "Configure OAuth", ...}]`) 
- Refer to task structure details (previously linked to `tasks.mdc`).

## Configuration Management (Updated)

Taskmaster configuration is managed through two main mechanisms:

1.  **`.taskmasterconfig` File (Primary):**
    *   Located in the project root directory.
    *   Stores most configuration settings: AI model selections (main, research, fallback), parameters (max tokens, temperature), logging level, default subtasks/priority, project name, etc.
    *   **Managed via `task-master models --setup` command.** Do not edit manually unless you know what you are doing.
    *   **View/Set specific models via `task-master models` command or `models` MCP tool.**
    *   Created automatically when you run `task-master models --setup` for the first time.

2.  **Environment Variables (`.env` / `mcp.json`):**
    *   Used **only** for sensitive API keys and specific endpoint URLs.
    *   Place API keys (one per provider) in a `.env` file in the project root for CLI usage.
    *   For MCP/Cursor integration, configure these keys in the `env` section of `.cursor/mcp.json`.
    *   Available keys/variables: See `assets/env.example` or the Configuration section in the command reference (previously linked to `taskmaster.mdc`).

**Important:** Non-API key settings (like model selections, `MAX_TOKENS`, `LOG_LEVEL`) are **no longer configured via environment variables**. Use the `task-master models` command (or `--setup` for interactive configuration) or the `models` MCP tool.
**If AI commands FAIL in MCP** verify that the API key for the selected provider is present in the `env` section of `.cursor/mcp.json`.
**If AI commands FAIL in CLI** verify that the API key for the selected provider is present in the `.env` file in the root of the project.

## Determining the Next Task

- Run `next_task` / `task-master next` to show the next task to work on.
- The command identifies tasks with all dependencies satisfied
- Tasks are prioritized by priority level, dependency count, and ID
- The command shows comprehensive task information including:
    - Basic task details and description
    - Implementation details
    - Subtasks (if they exist)
    - Contextual suggested actions
- Recommended before starting any new development work
- Respects your project's dependency structure
- Ensures tasks are completed in the appropriate sequence
- Provides ready-to-use commands for common task actions

## Viewing Specific Task Details

- Run `get_task` / `task-master show <id>` to view a specific task.
- Use dot notation for subtasks: `task-master show 1.2` (shows subtask 2 of task 1)
- Displays comprehensive information similar to the next command, but for a specific task
- For parent tasks, shows all subtasks and their current status
- For subtasks, shows parent task information and relationship
- Provides contextual suggested actions appropriate for the specific task
- Useful for examining task details before implementation or checking status

## Managing Task Dependencies

- Use `add_dependency` / `task-master add-dependency --id=<id> --depends-on=<id>` to add a dependency.
- Use `remove_dependency` / `task-master remove-dependency --id=<id> --depends-on=<id>` to remove a dependency.
- The system prevents circular dependencies and duplicate dependency entries
- Dependencies are checked for existence before being added or removed
- Task files are automatically regenerated after dependency changes
- Dependencies are visualized with status indicators in task listings and files

## Iterative Subtask Implementation

Once a task has been broken down into subtasks using `expand_task` or similar methods, follow this iterative process for implementation:

1.  **Understand the Goal (Preparation):**
    *   Use `get_task` / `task-master show <subtaskId>` (see [`taskmaster.mdc`](mdc:.cursor/rules/taskmaster.mdc)) to thoroughly understand the specific goals and requirements of the subtask.

2.  **Initial Exploration & Planning (Iteration 1):**
    *   This is the first attempt at creating a concrete implementation plan.
    *   Explore the codebase to identify the precise files, functions, and even specific lines of code that will need modification.
    *   Determine the intended code changes (diffs) and their locations.
    *   Gather *all* relevant details from this exploration phase.

3.  **Log the Plan:**
    *   Run `update_subtask` / `task-master update-subtask --id=<subtaskId> --prompt='<detailed plan>'`.
    *   Provide the *complete and detailed* findings from the exploration phase in the prompt. Include file paths, line numbers, proposed diffs, reasoning, and any potential challenges identified. Do not omit details. The goal is to create a rich, timestamped log within the subtask's `details`.

4.  **Verify the Plan:**
    *   Run `get_task` / `task-master show <subtaskId>` again to confirm that the detailed implementation plan has been successfully appended to the subtask's details.

5.  **Begin Implementation:**
    *   Set the subtask status using `set_task_status` / `task-master set-status --id=<subtaskId> --status=in-progress`.
    *   Start coding based on the logged plan.

6.  **Refine and Log Progress (Iteration 2+):**
    *   As implementation progresses, you will encounter challenges, discover nuances, or confirm successful approaches.
    *   **Before appending new information**: Briefly review the *existing* details logged in the subtask (using `get_task` or recalling from context) to ensure the update adds fresh insights and avoids redundancy.
    *   **Regularly** use `update_subtask` / `task-master update-subtask --id=<subtaskId> --prompt='<update details>\n- What worked...\n- What didn't work...'` to append new findings.
    *   **Crucially, log:**
        *   What worked ("fundamental truths" discovered).
        *   What didn't work and why (to avoid repeating mistakes).
        *   Specific code snippets or configurations that were successful.
        *   Decisions made, especially if confirmed with user input.
        *   Any deviations from the initial plan and the reasoning.
    *   The objective is to continuously enrich the subtask's details, creating a log of the implementation journey that helps the AI (and human developers) learn, adapt, and avoid repeating errors.

7.  **Review & Update Rules (Post-Implementation):**
    *   Once the implementation for the subtask is functionally complete, review all code changes and the relevant chat history.
    *   Identify any new or modified code patterns, conventions, or best practices established during the implementation.
    *   Create new or update existing rules following internal guidelines (previously linked to `cursor_rules.mdc` and `self_improve.mdc`).

8.  **Mark Task Complete:**
    *   After verifying the implementation and updating any necessary rules, mark the subtask as completed: `set_task_status` / `task-master set-status --id=<subtaskId> --status=done`.

9.  **Commit Changes (If using Git):**
    *   Stage the relevant code changes and any updated/new rule files (`git add .`).
    *   Craft a comprehensive Git commit message summarizing the work done for the subtask, including both code implementation and any rule adjustments.
    *   Execute the commit command directly in the terminal (e.g., `git commit -m 'feat(module): Implement feature X for subtask <subtaskId>\n\n- Details about changes...\n- Updated rule Y for pattern Z'`).
    *   Consider if a Changeset is needed according to internal versioning guidelines (previously linked to `changeset.mdc`). If so, run `npm run changeset`, stage the generated file, and amend the commit or create a new one.

10. **Proceed to Next Subtask:**
    *   Identify the next subtask (e.g., using `next_task` / `task-master next`).

## Code Analysis & Refactoring Techniques

- **Top-Level Function Search**:
    - Useful for understanding module structure or planning refactors.
    - Use grep/ripgrep to find exported functions/constants:
      `rg "export (async function|function|const) \w+"` or similar patterns.
    - Can help compare functions between files during migrations or identify potential naming conflicts.

---
*This workflow provides a general guideline. Adapt it based on your specific project needs and team practices.*
</file>

<file path=".cursor/rules/self_improve.mdc">
---
description: Guidelines for continuously improving Cursor rules based on emerging code patterns and best practices.
globs: **/*
alwaysApply: true
---

- **Rule Improvement Triggers:**
  - New code patterns not covered by existing rules
  - Repeated similar implementations across files
  - Common error patterns that could be prevented
  - New libraries or tools being used consistently
  - Emerging best practices in the codebase

- **Analysis Process:**
  - Compare new code with existing rules
  - Identify patterns that should be standardized
  - Look for references to external documentation
  - Check for consistent error handling patterns
  - Monitor test patterns and coverage

- **Rule Updates:**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by a rule
    - Code reviews repeatedly mention the same feedback
    - New security or performance patterns emerge

  - **Modify Existing Rules When:**
    - Better examples exist in the codebase
    - Additional edge cases are discovered
    - Related rules have been updated
    - Implementation details have changed

- **Example Pattern Recognition:**
  ```typescript
  // If you see repeated patterns like:
  const data = await prisma.user.findMany({
    select: { id: true, email: true },
    where: { status: 'ACTIVE' }
  });
  
  // Consider adding to [prisma.mdc](mdc:.cursor/rules/prisma.mdc):
  // - Standard select fields
  // - Common where conditions
  // - Performance optimization patterns
  ```

- **Rule Quality Checks:**
  - Rules should be actionable and specific
  - Examples should come from actual code
  - References should be up to date
  - Patterns should be consistently enforced

- **Continuous Improvement:**
  - Monitor code review comments
  - Track common development questions
  - Update rules after major refactors
  - Add links to relevant documentation
  - Cross-reference related rules

- **Rule Deprecation:**
  - Mark outdated patterns as deprecated
  - Remove rules that no longer apply
  - Update references to deprecated rules
  - Document migration paths for old patterns

- **Documentation Updates:**
  - Keep examples synchronized with code
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes
Follow [cursor_rules.mdc](mdc:.cursor/rules/cursor_rules.mdc) for proper rule formatting and structure.
</file>

<file path=".cursor/rules/taskmaster.mdc">
---
description: Comprehensive reference for Taskmaster MCP tools and CLI commands.
globs: **/*
alwaysApply: true
---
# Taskmaster Tool & Command Reference

This document provides a detailed reference for interacting with Taskmaster, covering both the recommended MCP tools, suitable for integrations like Cursor, and the corresponding `task-master` CLI commands, designed for direct user interaction or fallback.

**Note:** For interacting with Taskmaster programmatically or via integrated tools, using the **MCP tools is strongly recommended** due to better performance, structured data, and error handling. The CLI commands serve as a user-friendly alternative and fallback. 

**Important:** Several MCP tools involve AI processing... The AI-powered tools include `parse_prd`, `analyze_project_complexity`, `update_subtask`, `update_task`, `update`, `expand_all`, `expand_task`, and `add_task`.

---

## Initialization & Setup

### 1. Initialize Project (`init`)

*   **MCP Tool:** `initialize_project`
*   **CLI Command:** `task-master init [options]`
*   **Description:** `Set up the basic Taskmaster file structure and configuration in the current directory for a new project.`
*   **Key CLI Options:**
    *   `--name <name>`: `Set the name for your project in Taskmaster's configuration.`
    *   `--description <text>`: `Provide a brief description for your project.`
    *   `--version <version>`: `Set the initial version for your project, e.g., '0.1.0'.`
    *   `-y, --yes`: `Initialize Taskmaster quickly using default settings without interactive prompts.`
*   **Usage:** Run this once at the beginning of a new project.
*   **MCP Variant Description:** `Set up the basic Taskmaster file structure and configuration in the current directory for a new project by running the 'task-master init' command.`
*   **Key MCP Parameters/Options:**
    *   `projectName`: `Set the name for your project.` (CLI: `--name <name>`)
    *   `projectDescription`: `Provide a brief description for your project.` (CLI: `--description <text>`)
    *   `projectVersion`: `Set the initial version for your project, e.g., '0.1.0'.` (CLI: `--version <version>`)
    *   `authorName`: `Author name.` (CLI: `--author <author>`)
    *   `skipInstall`: `Skip installing dependencies. Default is false.` (CLI: `--skip-install`)
    *   `addAliases`: `Add shell aliases tm and taskmaster. Default is false.` (CLI: `--aliases`)
    *   `yes`: `Skip prompts and use defaults/provided arguments. Default is false.` (CLI: `-y, --yes`)
*   **Usage:** Run this once at the beginning of a new project, typically via an integrated tool like Cursor. Operates on the current working directory of the MCP server. 
*   **Important:** Once complete, you *MUST* parse a prd in order to generate tasks. There will be no tasks files until then. The next step after initializing should be to create a PRD using the example PRD in scripts/example_prd.txt. 

### 2. Parse PRD (`parse_prd`)

*   **MCP Tool:** `parse_prd`
*   **CLI Command:** `task-master parse-prd [file] [options]`
*   **Description:** `Parse a Product Requirements Document, PRD, or text file with Taskmaster to automatically generate an initial set of tasks in tasks.json.`
*   **Key Parameters/Options:**
    *   `input`: `Path to your PRD or requirements text file that Taskmaster should parse for tasks.` (CLI: `[file]` positional or `-i, --input <file>`)
    *   `output`: `Specify where Taskmaster should save the generated 'tasks.json' file. Defaults to 'tasks/tasks.json'.` (CLI: `-o, --output <file>`)
    *   `numTasks`: `Approximate number of top-level tasks Taskmaster should aim to generate from the document.` (CLI: `-n, --num-tasks <number>`)
    *   `force`: `Use this to allow Taskmaster to overwrite an existing 'tasks.json' without asking for confirmation.` (CLI: `-f, --force`)
*   **Usage:** Useful for bootstrapping a project from an existing requirements document.
*   **Notes:** Task Master will strictly adhere to any specific requirements mentioned in the PRD, such as libraries, database schemas, frameworks, tech stacks, etc., while filling in any gaps where the PRD isn't fully specified. Tasks are designed to provide the most direct implementation path while avoiding over-engineering.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress. If the user does not have a PRD, suggest discussing their idea and then use the example PRD in `scripts/example_prd.txt` as a template for creating the PRD based on their idea, for use with `parse-prd`.

---

## AI Model Configuration

### 2. Manage Models (`models`)
*   **MCP Tool:** `models`
*   **CLI Command:** `task-master models [options]`
*   **Description:** `View the current AI model configuration or set specific models for different roles (main, research, fallback). Allows setting custom model IDs for Ollama and OpenRouter.`
*   **Key MCP Parameters/Options:**
    *   `setMain <model_id>`: `Set the primary model ID for task generation/updates.` (CLI: `--set-main <model_id>`)
    *   `setResearch <model_id>`: `Set the model ID for research-backed operations.` (CLI: `--set-research <model_id>`)
    *   `setFallback <model_id>`: `Set the model ID to use if the primary fails.` (CLI: `--set-fallback <model_id>`)
    *   `ollama <boolean>`: `Indicates the set model ID is a custom Ollama model.` (CLI: `--ollama`)
    *   `openrouter <boolean>`: `Indicates the set model ID is a custom OpenRouter model.` (CLI: `--openrouter`)
    *   `listAvailableModels <boolean>`: `If true, lists available models not currently assigned to a role.` (CLI: No direct equivalent; CLI lists available automatically)
    *   `projectRoot <string>`: `Optional. Absolute path to the project root directory.` (CLI: Determined automatically)
*   **Key CLI Options:**
    *   `--set-main <model_id>`: `Set the primary model.`
    *   `--set-research <model_id>`: `Set the research model.`
    *   `--set-fallback <model_id>`: `Set the fallback model.`
    *   `--ollama`: `Specify that the provided model ID is for Ollama (use with --set-*).`
    *   `--openrouter`: `Specify that the provided model ID is for OpenRouter (use with --set-*). Validates against OpenRouter API.`
    *   `--setup`: `Run interactive setup to configure models, including custom Ollama/OpenRouter IDs.`
*   **Usage (MCP):** Call without set flags to get current config. Use `setMain`, `setResearch`, or `setFallback` with a valid model ID to update the configuration. Use `listAvailableModels: true` to get a list of unassigned models. To set a custom model, provide the model ID and set `ollama: true` or `openrouter: true`.
*   **Usage (CLI):** Run without flags to view current configuration and available models. Use set flags to update specific roles. Use `--setup` for guided configuration, including custom models. To set a custom model via flags, use `--set-<role>=<model_id>` along with either `--ollama` or `--openrouter`.
*   **Notes:** Configuration is stored in `.taskmasterconfig` in the project root. This command/tool modifies that file. Use `listAvailableModels` or `task-master models` to see internally supported models. OpenRouter custom models are validated against their live API. Ollama custom models are not validated live.
*   **API note:** API keys for selected AI providers (based on their model) need to exist in the mcp.json file to be accessible in MCP context. The API keys must be present in the local .env file for the CLI to be able to read them.
*   **Model costs:** The costs in supported models are expressed in dollars. An input/output value of 3 is $3.00. A value of 0.8 is $0.80. 
*   **Warning:** DO NOT MANUALLY EDIT THE .taskmasterconfig FILE. Use the included commands either in the MCP or CLI format as needed. Always prioritize MCP tools when available and use the CLI as a fallback.

---

## Task Listing & Viewing

### 3. Get Tasks (`get_tasks`)

*   **MCP Tool:** `get_tasks`
*   **CLI Command:** `task-master list [options]`
*   **Description:** `List your Taskmaster tasks, optionally filtering by status and showing subtasks.`
*   **Key Parameters/Options:**
    *   `status`: `Show only Taskmaster tasks matching this status, e.g., 'pending' or 'done'.` (CLI: `-s, --status <status>`)
    *   `withSubtasks`: `Include subtasks indented under their parent tasks in the list.` (CLI: `--with-subtasks`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Get an overview of the project status, often used at the start of a work session.

### 4. Get Next Task (`next_task`)

*   **MCP Tool:** `next_task`
*   **CLI Command:** `task-master next [options]`
*   **Description:** `Ask Taskmaster to show the next available task you can work on, based on status and completed dependencies.`
*   **Key Parameters/Options:**
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Identify what to work on next according to the plan.

### 5. Get Task Details (`get_task`)

*   **MCP Tool:** `get_task`
*   **CLI Command:** `task-master show [id] [options]`
*   **Description:** `Display detailed information for a specific Taskmaster task or subtask by its ID.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID of the Taskmaster task, e.g., '15', or subtask, e.g., '15.2', you want to view.` (CLI: `[id]` positional or `-i, --id <id>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Understand the full details, implementation notes, and test strategy for a specific task before starting work.

---

## Task Creation & Modification

### 6. Add Task (`add_task`)

*   **MCP Tool:** `add_task`
*   **CLI Command:** `task-master add-task [options]`
*   **Description:** `Add a new task to Taskmaster by describing it; AI will structure it.`
*   **Key Parameters/Options:**
    *   `prompt`: `Required. Describe the new task you want Taskmaster to create, e.g., "Implement user authentication using JWT".` (CLI: `-p, --prompt <text>`)
    *   `dependencies`: `Specify the IDs of any Taskmaster tasks that must be completed before this new one can start, e.g., '12,14'.` (CLI: `-d, --dependencies <ids>`)
    *   `priority`: `Set the priority for the new task: 'high', 'medium', or 'low'. Default is 'medium'.` (CLI: `--priority <priority>`)
    *   `research`: `Enable Taskmaster to use the research role for potentially more informed task creation.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Quickly add newly identified tasks during development.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 7. Add Subtask (`add_subtask`)

*   **MCP Tool:** `add_subtask`
*   **CLI Command:** `task-master add-subtask [options]`
*   **Description:** `Add a new subtask to a Taskmaster parent task, or convert an existing task into a subtask.`
*   **Key Parameters/Options:**
    *   `id` / `parent`: `Required. The ID of the Taskmaster task that will be the parent.` (MCP: `id`, CLI: `-p, --parent <id>`)
    *   `taskId`: `Use this if you want to convert an existing top-level Taskmaster task into a subtask of the specified parent.` (CLI: `-i, --task-id <id>`)
    *   `title`: `Required if not using taskId. The title for the new subtask Taskmaster should create.` (CLI: `-t, --title <title>`)
    *   `description`: `A brief description for the new subtask.` (CLI: `-d, --description <text>`)
    *   `details`: `Provide implementation notes or details for the new subtask.` (CLI: `--details <text>`)
    *   `dependencies`: `Specify IDs of other tasks or subtasks, e.g., '15' or '16.1', that must be done before this new subtask.` (CLI: `--dependencies <ids>`)
    *   `status`: `Set the initial status for the new subtask. Default is 'pending'.` (CLI: `-s, --status <status>`)
    *   `skipGenerate`: `Prevent Taskmaster from automatically regenerating markdown task files after adding the subtask.` (CLI: `--skip-generate`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Break down tasks manually or reorganize existing tasks.

### 8. Update Tasks (`update`)

*   **MCP Tool:** `update`
*   **CLI Command:** `task-master update [options]`
*   **Description:** `Update multiple upcoming tasks in Taskmaster based on new context or changes, starting from a specific task ID.`
*   **Key Parameters/Options:**
    *   `from`: `Required. The ID of the first task Taskmaster should update. All tasks with this ID or higher that are not 'done' will be considered.` (CLI: `--from <id>`)
    *   `prompt`: `Required. Explain the change or new context for Taskmaster to apply to the tasks, e.g., "We are now using React Query instead of Redux Toolkit for data fetching".` (CLI: `-p, --prompt <text>`)
    *   `research`: `Enable Taskmaster to use the research role for more informed updates. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Handle significant implementation changes or pivots that affect multiple future tasks. Example CLI: `task-master update --from='18' --prompt='Switching to React Query.\nNeed to refactor data fetching...'`
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 9. Update Task (`update_task`)

*   **MCP Tool:** `update_task`
*   **CLI Command:** `task-master update-task [options]`
*   **Description:** `Modify a specific Taskmaster task or subtask by its ID, incorporating new information or changes.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The specific ID of the Taskmaster task, e.g., '15', or subtask, e.g., '15.2', you want to update.` (CLI: `-i, --id <id>`)
    *   `prompt`: `Required. Explain the specific changes or provide the new information Taskmaster should incorporate into this task.` (CLI: `-p, --prompt <text>`)
    *   `research`: `Enable Taskmaster to use the research role for more informed updates. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Refine a specific task based on new understanding or feedback. Example CLI: `task-master update-task --id='15' --prompt='Clarification: Use PostgreSQL instead of MySQL.\nUpdate schema details...'`
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 10. Update Subtask (`update_subtask`)

*   **MCP Tool:** `update_subtask`
*   **CLI Command:** `task-master update-subtask [options]`
*   **Description:** `Append timestamped notes or details to a specific Taskmaster subtask without overwriting existing content. Intended for iterative implementation logging.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The specific ID of the Taskmaster subtask, e.g., '15.2', you want to add information to.` (CLI: `-i, --id <id>`)
    *   `prompt`: `Required. Provide the information or notes Taskmaster should append to the subtask's details. Ensure this adds *new* information not already present.` (CLI: `-p, --prompt <text>`)
    *   `research`: `Enable Taskmaster to use the research role for more informed updates. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Add implementation notes, code snippets, or clarifications to a subtask during development. Before calling, review the subtask's current details to append only fresh insights, helping to build a detailed log of the implementation journey and avoid redundancy. Example CLI: `task-master update-subtask --id='15.2' --prompt='Discovered that the API requires header X.\nImplementation needs adjustment...'`
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 11. Set Task Status (`set_task_status`)

*   **MCP Tool:** `set_task_status`
*   **CLI Command:** `task-master set-status [options]`
*   **Description:** `Update the status of one or more Taskmaster tasks or subtasks, e.g., 'pending', 'in-progress', 'done'.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID(s) of the Taskmaster task(s) or subtask(s), e.g., '15', '15.2', or '16,17.1', to update.` (CLI: `-i, --id <id>`)
    *   `status`: `Required. The new status to set, e.g., 'done', 'pending', 'in-progress', 'review', 'cancelled'.` (CLI: `-s, --status <status>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Mark progress as tasks move through the development cycle.

### 12. Remove Task (`remove_task`)

*   **MCP Tool:** `remove_task`
*   **CLI Command:** `task-master remove-task [options]`
*   **Description:** `Permanently remove a task or subtask from the Taskmaster tasks list.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID of the Taskmaster task, e.g., '5', or subtask, e.g., '5.2', to permanently remove.` (CLI: `-i, --id <id>`)
    *   `yes`: `Skip the confirmation prompt and immediately delete the task.` (CLI: `-y, --yes`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Permanently delete tasks or subtasks that are no longer needed in the project.
*   **Notes:** Use with caution as this operation cannot be undone. Consider using 'blocked', 'cancelled', or 'deferred' status instead if you just want to exclude a task from active planning but keep it for reference. The command automatically cleans up dependency references in other tasks.

---

## Task Structure & Breakdown

### 13. Expand Task (`expand_task`)

*   **MCP Tool:** `expand_task`
*   **CLI Command:** `task-master expand [options]`
*   **Description:** `Use Taskmaster's AI to break down a complex task into smaller, manageable subtasks. Appends subtasks by default.`
*   **Key Parameters/Options:**
    *   `id`: `The ID of the specific Taskmaster task you want to break down into subtasks.` (CLI: `-i, --id <id>`)
    *   `num`: `Optional: Suggests how many subtasks Taskmaster should aim to create. Uses complexity analysis/defaults otherwise.` (CLI: `-n, --num <number>`)
    *   `research`: `Enable Taskmaster to use the research role for more informed subtask generation. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `prompt`: `Optional: Provide extra context or specific instructions to Taskmaster for generating the subtasks.` (CLI: `-p, --prompt <text>`)
    *   `force`: `Optional: If true, clear existing subtasks before generating new ones. Default is false (append).` (CLI: `--force`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Generate a detailed implementation plan for a complex task before starting coding. Automatically uses complexity report recommendations if available and `num` is not specified.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 14. Expand All Tasks (`expand_all`)

*   **MCP Tool:** `expand_all`
*   **CLI Command:** `task-master expand --all [options]` (Note: CLI uses the `expand` command with the `--all` flag)
*   **Description:** `Tell Taskmaster to automatically expand all eligible pending/in-progress tasks based on complexity analysis or defaults. Appends subtasks by default.`
*   **Key Parameters/Options:**
    *   `num`: `Optional: Suggests how many subtasks Taskmaster should aim to create per task.` (CLI: `-n, --num <number>`)
    *   `research`: `Enable research role for more informed subtask generation. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `prompt`: `Optional: Provide extra context for Taskmaster to apply generally during expansion.` (CLI: `-p, --prompt <text>`)
    *   `force`: `Optional: If true, clear existing subtasks before generating new ones for each eligible task. Default is false (append).` (CLI: `--force`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Useful after initial task generation or complexity analysis to break down multiple tasks at once.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 15. Clear Subtasks (`clear_subtasks`)

*   **MCP Tool:** `clear_subtasks`
*   **CLI Command:** `task-master clear-subtasks [options]`
*   **Description:** `Remove all subtasks from one or more specified Taskmaster parent tasks.`
*   **Key Parameters/Options:**
    *   `id`: `The ID(s) of the Taskmaster parent task(s) whose subtasks you want to remove, e.g., '15' or '16,18'. Required unless using `all`.) (CLI: `-i, --id <ids>`)
    *   `all`: `Tell Taskmaster to remove subtasks from all parent tasks.` (CLI: `--all`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Used before regenerating subtasks with `expand_task` if the previous breakdown needs replacement.

### 16. Remove Subtask (`remove_subtask`)

*   **MCP Tool:** `remove_subtask`
*   **CLI Command:** `task-master remove-subtask [options]`
*   **Description:** `Remove a subtask from its Taskmaster parent, optionally converting it into a standalone task.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID(s) of the Taskmaster subtask(s) to remove, e.g., '15.2' or '16.1,16.3'.` (CLI: `-i, --id <id>`)
    *   `convert`: `If used, Taskmaster will turn the subtask into a regular top-level task instead of deleting it.` (CLI: `-c, --convert`)
    *   `skipGenerate`: `Prevent Taskmaster from automatically regenerating markdown task files after removing the subtask.` (CLI: `--skip-generate`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Delete unnecessary subtasks or promote a subtask to a top-level task.

---

## Dependency Management

### 17. Add Dependency (`add_dependency`)

*   **MCP Tool:** `add_dependency`
*   **CLI Command:** `task-master add-dependency [options]`
*   **Description:** `Define a dependency in Taskmaster, making one task a prerequisite for another.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID of the Taskmaster task that will depend on another.` (CLI: `-i, --id <id>`)
    *   `dependsOn`: `Required. The ID of the Taskmaster task that must be completed first, the prerequisite.` (CLI: `-d, --depends-on <id>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <path>`)
*   **Usage:** Establish the correct order of execution between tasks.

### 18. Remove Dependency (`remove_dependency`)

*   **MCP Tool:** `remove_dependency`
*   **CLI Command:** `task-master remove-dependency [options]`
*   **Description:** `Remove a dependency relationship between two Taskmaster tasks.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID of the Taskmaster task you want to remove a prerequisite from.` (CLI: `-i, --id <id>`)
    *   `dependsOn`: `Required. The ID of the Taskmaster task that should no longer be a prerequisite.` (CLI: `-d, --depends-on <id>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Update task relationships when the order of execution changes.

### 19. Validate Dependencies (`validate_dependencies`)

*   **MCP Tool:** `validate_dependencies`
*   **CLI Command:** `task-master validate-dependencies [options]`
*   **Description:** `Check your Taskmaster tasks for dependency issues (like circular references or links to non-existent tasks) without making changes.`
*   **Key Parameters/Options:**
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Audit the integrity of your task dependencies.

### 20. Fix Dependencies (`fix_dependencies`)

*   **MCP Tool:** `fix_dependencies`
*   **CLI Command:** `task-master fix-dependencies [options]`
*   **Description:** `Automatically fix dependency issues (like circular references or links to non-existent tasks) in your Taskmaster tasks.`
*   **Key Parameters/Options:**
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Clean up dependency errors automatically.

---

## Analysis & Reporting

### 21. Analyze Project Complexity (`analyze_project_complexity`)

*   **MCP Tool:** `analyze_project_complexity`
*   **CLI Command:** `task-master analyze-complexity [options]`
*   **Description:** `Have Taskmaster analyze your tasks to determine their complexity and suggest which ones need to be broken down further.`
*   **Key Parameters/Options:**
    *   `output`: `Where to save the complexity analysis report (default: 'scripts/task-complexity-report.json').` (CLI: `-o, --output <file>`)
    *   `threshold`: `The minimum complexity score (1-10) that should trigger a recommendation to expand a task.` (CLI: `-t, --threshold <number>`)
    *   `research`: `Enable research role for more accurate complexity analysis. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Used before breaking down tasks to identify which ones need the most attention.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 22. View Complexity Report (`complexity_report`)

*   **MCP Tool:** `complexity_report`
*   **CLI Command:** `task-master complexity-report [options]`
*   **Description:** `Display the task complexity analysis report in a readable format.`
*   **Key Parameters/Options:**
    *   `file`: `Path to the complexity report (default: 'scripts/task-complexity-report.json').` (CLI: `-f, --file <file>`)
*   **Usage:** Review and understand the complexity analysis results after running analyze-complexity.

---

## File Management

### 23. Generate Task Files (`generate`)

*   **MCP Tool:** `generate`
*   **CLI Command:** `task-master generate [options]`
*   **Description:** `Create or update individual Markdown files for each task based on your tasks.json.`
*   **Key Parameters/Options:**
    *   `output`: `The directory where Taskmaster should save the task files (default: in a 'tasks' directory).` (CLI: `-o, --output <directory>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Run this after making changes to tasks.json to keep individual task files up to date.

---

## Environment Variables Configuration (Updated)

Taskmaster primarily uses the **`.taskmasterconfig`** file (in project root) for configuration (models, parameters, logging level, etc.), managed via `task-master models --setup`.

Environment variables are used **only** for sensitive API keys related to AI providers and specific overrides like the Ollama base URL:

*   **API Keys (Required for corresponding provider):**
    *   `ANTHROPIC_API_KEY`
    *   `PERPLEXITY_API_KEY`
    *   `OPENAI_API_KEY`
    *   `GOOGLE_API_KEY`
    *   `MISTRAL_API_KEY`
    *   `AZURE_OPENAI_API_KEY` (Requires `AZURE_OPENAI_ENDPOINT` too)
    *   `OPENROUTER_API_KEY`
    *   `XAI_API_KEY`
    *   `OLLANA_API_KEY` (Requires `OLLAMA_BASE_URL` too)
*   **Endpoints (Optional/Provider Specific inside .taskmasterconfig):**
    *   `AZURE_OPENAI_ENDPOINT`
    *   `OLLAMA_BASE_URL` (Default: `http://localhost:11434/api`)

**Set API keys** in your **`.env`** file in the project root (for CLI use) or within the `env` section of your **`.cursor/mcp.json`** file (for MCP/Cursor integration). All other settings (model choice, max tokens, temperature, log level, custom endpoints) are managed in `.taskmasterconfig` via `task-master models` command or `models` MCP tool.

---

For details on how these commands fit into the development process, see the [Development Workflow Guide](mdc:.cursor/rules/dev_workflow.mdc).
</file>

<file path=".cursor/mcp.json">
{
    "mcpServers": {
        "task-master-ai": {
            "command": "npx",
            "args": [
                "-y",
                "--package=task-master-ai",
                "task-master-ai"
            ],
            "env": {
                "ANTHROPIC_API_KEY": "ANTHROPIC_API_KEY_HERE",
                "PERPLEXITY_API_KEY": "PERPLEXITY_API_KEY_HERE",
                "OPENAI_API_KEY": "OPENAI_API_KEY_HERE",
                "GOOGLE_API_KEY": "GOOGLE_API_KEY_HERE",
                "XAI_API_KEY": "XAI_API_KEY_HERE",
                "OPENROUTER_API_KEY": "OPENROUTER_API_KEY_HERE",
                "MISTRAL_API_KEY": "MISTRAL_API_KEY_HERE",
                "AZURE_OPENAI_API_KEY": "AZURE_OPENAI_API_KEY_HERE",
                "OLLAMA_API_KEY": "OLLAMA_API_KEY_HERE"
            }
        }
    }
}
</file>

<file path=".roo/rules/dev_workflow.md">
---
description: Guide for using Task Master to manage task-driven development workflows
globs: **/*
alwaysApply: true
---
# Task Master Development Workflow

This guide outlines the typical process for using Task Master to manage software development projects.

## Primary Interaction: MCP Server vs. CLI

Task Master offers two primary ways to interact:

1.  **MCP Server (Recommended for Integrated Tools)**:
    - For AI agents and integrated development environments (like Roo Code), interacting via the **MCP server is the preferred method**.
    - The MCP server exposes Task Master functionality through a set of tools (e.g., `get_tasks`, `add_subtask`).
    - This method offers better performance, structured data exchange, and richer error handling compared to CLI parsing.
    - Refer to [`mcp.md`](mdc:.roo/rules/mcp.md) for details on the MCP architecture and available tools.
    - A comprehensive list and description of MCP tools and their corresponding CLI commands can be found in [`taskmaster.md`](mdc:.roo/rules/taskmaster.md).
    - **Restart the MCP server** if core logic in `scripts/modules` or MCP tool/direct function definitions change.

2.  **`task-master` CLI (For Users & Fallback)**:
    - The global `task-master` command provides a user-friendly interface for direct terminal interaction.
    - It can also serve as a fallback if the MCP server is inaccessible or a specific function isn't exposed via MCP.
    - Install globally with `npm install -g task-master-ai` or use locally via `npx task-master-ai ...`.
    - The CLI commands often mirror the MCP tools (e.g., `task-master list` corresponds to `get_tasks`).
    - Refer to [`taskmaster.md`](mdc:.roo/rules/taskmaster.md) for a detailed command reference.

## Standard Development Workflow Process

-   Start new projects by running `initialize_project` tool / `task-master init` or `parse_prd` / `task-master parse-prd --input='<prd-file.txt>'` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) to generate initial tasks.json
-   Begin coding sessions with `get_tasks` / `task-master list` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) to see current tasks, status, and IDs
-   Determine the next task to work on using `next_task` / `task-master next` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)).
-   Analyze task complexity with `analyze_project_complexity` / `task-master analyze-complexity --research` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) before breaking down tasks
-   Review complexity report using `complexity_report` / `task-master complexity-report` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)).
-   Select tasks based on dependencies (all marked 'done'), priority level, and ID order
-   Clarify tasks by checking task files in tasks/ directory or asking for user input
-   View specific task details using `get_task` / `task-master show <id>` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) to understand implementation requirements
-   Break down complex tasks using `expand_task` / `task-master expand --id=<id> --force --research` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) with appropriate flags like `--force` (to replace existing subtasks) and `--research`.
-   Clear existing subtasks if needed using `clear_subtasks` / `task-master clear-subtasks --id=<id>` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) before regenerating
-   Implement code following task details, dependencies, and project standards
-   Verify tasks according to test strategies before marking as complete (See [`tests.md`](mdc:.roo/rules/tests.md))
-   Mark completed tasks with `set_task_status` / `task-master set-status --id=<id> --status=done` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md))
-   Update dependent tasks when implementation differs from original plan using `update` / `task-master update --from=<id> --prompt="..."` or `update_task` / `task-master update-task --id=<id> --prompt="..."` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md))
-   Add new tasks discovered during implementation using `add_task` / `task-master add-task --prompt="..." --research` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)).
-   Add new subtasks as needed using `add_subtask` / `task-master add-subtask --parent=<id> --title="..."` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)).
-   Append notes or details to subtasks using `update_subtask` / `task-master update-subtask --id=<subtaskId> --prompt='Add implementation notes here...\nMore details...'` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)).
-   Generate task files with `generate` / `task-master generate` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) after updating tasks.json
-   Maintain valid dependency structure with `add_dependency`/`remove_dependency` tools or `task-master add-dependency`/`remove-dependency` commands, `validate_dependencies` / `task-master validate-dependencies`, and `fix_dependencies` / `task-master fix-dependencies` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) when needed
-   Respect dependency chains and task priorities when selecting work
-   Report progress regularly using `get_tasks` / `task-master list`

## Task Complexity Analysis

-   Run `analyze_project_complexity` / `task-master analyze-complexity --research` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) for comprehensive analysis
-   Review complexity report via `complexity_report` / `task-master complexity-report` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) for a formatted, readable version.
-   Focus on tasks with highest complexity scores (8-10) for detailed breakdown
-   Use analysis results to determine appropriate subtask allocation
-   Note that reports are automatically used by the `expand_task` tool/command

## Task Breakdown Process

-   Use `expand_task` / `task-master expand --id=<id>`. It automatically uses the complexity report if found, otherwise generates default number of subtasks.
-   Use `--num=<number>` to specify an explicit number of subtasks, overriding defaults or complexity report recommendations.
-   Add `--research` flag to leverage Perplexity AI for research-backed expansion.
-   Add `--force` flag to clear existing subtasks before generating new ones (default is to append).
-   Use `--prompt="<context>"` to provide additional context when needed.
-   Review and adjust generated subtasks as necessary.
-   Use `expand_all` tool or `task-master expand --all` to expand multiple pending tasks at once, respecting flags like `--force` and `--research`.
-   If subtasks need complete replacement (regardless of the `--force` flag on `expand`), clear them first with `clear_subtasks` / `task-master clear-subtasks --id=<id>`.

## Implementation Drift Handling

-   When implementation differs significantly from planned approach
-   When future tasks need modification due to current implementation choices
-   When new dependencies or requirements emerge
-   Use `update` / `task-master update --from=<futureTaskId> --prompt='<explanation>\nUpdate context...' --research` to update multiple future tasks.
-   Use `update_task` / `task-master update-task --id=<taskId> --prompt='<explanation>\nUpdate context...' --research` to update a single specific task.

## Task Status Management

-   Use 'pending' for tasks ready to be worked on
-   Use 'done' for completed and verified tasks
-   Use 'deferred' for postponed tasks
-   Add custom status values as needed for project-specific workflows

## Task Structure Fields

- **id**: Unique identifier for the task (Example: `1`, `1.1`)
- **title**: Brief, descriptive title (Example: `"Initialize Repo"`)
- **description**: Concise summary of what the task involves (Example: `"Create a new repository, set up initial structure."`)
- **status**: Current state of the task (Example: `"pending"`, `"done"`, `"deferred"`)
- **dependencies**: IDs of prerequisite tasks (Example: `[1, 2.1]`)
    - Dependencies are displayed with status indicators (✅ for completed, ⏱️ for pending)
    - This helps quickly identify which prerequisite tasks are blocking work
- **priority**: Importance level (Example: `"high"`, `"medium"`, `"low"`)
- **details**: In-depth implementation instructions (Example: `"Use GitHub client ID/secret, handle callback, set session token."`) 
- **testStrategy**: Verification approach (Example: `"Deploy and call endpoint to confirm 'Hello World' response."`) 
- **subtasks**: List of smaller, more specific tasks (Example: `[{"id": 1, "title": "Configure OAuth", ...}]`) 
- Refer to task structure details (previously linked to `tasks.md`).

## Configuration Management (Updated)

Taskmaster configuration is managed through two main mechanisms:

1.  **`.taskmasterconfig` File (Primary):**
    *   Located in the project root directory.
    *   Stores most configuration settings: AI model selections (main, research, fallback), parameters (max tokens, temperature), logging level, default subtasks/priority, project name, etc.
    *   **Managed via `task-master models --setup` command.** Do not edit manually unless you know what you are doing.
    *   **View/Set specific models via `task-master models` command or `models` MCP tool.**
    *   Created automatically when you run `task-master models --setup` for the first time.

2.  **Environment Variables (`.env` / `mcp.json`):**
    *   Used **only** for sensitive API keys and specific endpoint URLs.
    *   Place API keys (one per provider) in a `.env` file in the project root for CLI usage.
    *   For MCP/Roo Code integration, configure these keys in the `env` section of `.roo/mcp.json`.
    *   Available keys/variables: See `assets/env.example` or the Configuration section in the command reference (previously linked to `taskmaster.md`).

**Important:** Non-API key settings (like model selections, `MAX_TOKENS`, `LOG_LEVEL`) are **no longer configured via environment variables**. Use the `task-master models` command (or `--setup` for interactive configuration) or the `models` MCP tool.
**If AI commands FAIL in MCP** verify that the API key for the selected provider is present in the `env` section of `.roo/mcp.json`.
**If AI commands FAIL in CLI** verify that the API key for the selected provider is present in the `.env` file in the root of the project.

## Determining the Next Task

- Run `next_task` / `task-master next` to show the next task to work on.
- The command identifies tasks with all dependencies satisfied
- Tasks are prioritized by priority level, dependency count, and ID
- The command shows comprehensive task information including:
    - Basic task details and description
    - Implementation details
    - Subtasks (if they exist)
    - Contextual suggested actions
- Recommended before starting any new development work
- Respects your project's dependency structure
- Ensures tasks are completed in the appropriate sequence
- Provides ready-to-use commands for common task actions

## Viewing Specific Task Details

- Run `get_task` / `task-master show <id>` to view a specific task.
- Use dot notation for subtasks: `task-master show 1.2` (shows subtask 2 of task 1)
- Displays comprehensive information similar to the next command, but for a specific task
- For parent tasks, shows all subtasks and their current status
- For subtasks, shows parent task information and relationship
- Provides contextual suggested actions appropriate for the specific task
- Useful for examining task details before implementation or checking status

## Managing Task Dependencies

- Use `add_dependency` / `task-master add-dependency --id=<id> --depends-on=<id>` to add a dependency.
- Use `remove_dependency` / `task-master remove-dependency --id=<id> --depends-on=<id>` to remove a dependency.
- The system prevents circular dependencies and duplicate dependency entries
- Dependencies are checked for existence before being added or removed
- Task files are automatically regenerated after dependency changes
- Dependencies are visualized with status indicators in task listings and files

## Iterative Subtask Implementation

Once a task has been broken down into subtasks using `expand_task` or similar methods, follow this iterative process for implementation:

1.  **Understand the Goal (Preparation):**
    *   Use `get_task` / `task-master show <subtaskId>` (see [`taskmaster.md`](mdc:.roo/rules/taskmaster.md)) to thoroughly understand the specific goals and requirements of the subtask.

2.  **Initial Exploration & Planning (Iteration 1):**
    *   This is the first attempt at creating a concrete implementation plan.
    *   Explore the codebase to identify the precise files, functions, and even specific lines of code that will need modification.
    *   Determine the intended code changes (diffs) and their locations.
    *   Gather *all* relevant details from this exploration phase.

3.  **Log the Plan:**
    *   Run `update_subtask` / `task-master update-subtask --id=<subtaskId> --prompt='<detailed plan>'`.
    *   Provide the *complete and detailed* findings from the exploration phase in the prompt. Include file paths, line numbers, proposed diffs, reasoning, and any potential challenges identified. Do not omit details. The goal is to create a rich, timestamped log within the subtask's `details`.

4.  **Verify the Plan:**
    *   Run `get_task` / `task-master show <subtaskId>` again to confirm that the detailed implementation plan has been successfully appended to the subtask's details.

5.  **Begin Implementation:**
    *   Set the subtask status using `set_task_status` / `task-master set-status --id=<subtaskId> --status=in-progress`.
    *   Start coding based on the logged plan.

6.  **Refine and Log Progress (Iteration 2+):**
    *   As implementation progresses, you will encounter challenges, discover nuances, or confirm successful approaches.
    *   **Before appending new information**: Briefly review the *existing* details logged in the subtask (using `get_task` or recalling from context) to ensure the update adds fresh insights and avoids redundancy.
    *   **Regularly** use `update_subtask` / `task-master update-subtask --id=<subtaskId> --prompt='<update details>\n- What worked...\n- What didn't work...'` to append new findings.
    *   **Crucially, log:**
        *   What worked ("fundamental truths" discovered).
        *   What didn't work and why (to avoid repeating mistakes).
        *   Specific code snippets or configurations that were successful.
        *   Decisions made, especially if confirmed with user input.
        *   Any deviations from the initial plan and the reasoning.
    *   The objective is to continuously enrich the subtask's details, creating a log of the implementation journey that helps the AI (and human developers) learn, adapt, and avoid repeating errors.

7.  **Review & Update Rules (Post-Implementation):**
    *   Once the implementation for the subtask is functionally complete, review all code changes and the relevant chat history.
    *   Identify any new or modified code patterns, conventions, or best practices established during the implementation.
    *   Create new or update existing rules following internal guidelines (previously linked to `cursor_rules.md` and `self_improve.md`).

8.  **Mark Task Complete:**
    *   After verifying the implementation and updating any necessary rules, mark the subtask as completed: `set_task_status` / `task-master set-status --id=<subtaskId> --status=done`.

9.  **Commit Changes (If using Git):**
    *   Stage the relevant code changes and any updated/new rule files (`git add .`).
    *   Craft a comprehensive Git commit message summarizing the work done for the subtask, including both code implementation and any rule adjustments.
    *   Execute the commit command directly in the terminal (e.g., `git commit -m 'feat(module): Implement feature X for subtask <subtaskId>\n\n- Details about changes...\n- Updated rule Y for pattern Z'`).
    *   Consider if a Changeset is needed according to internal versioning guidelines (previously linked to `changeset.md`). If so, run `npm run changeset`, stage the generated file, and amend the commit or create a new one.

10. **Proceed to Next Subtask:**
    *   Identify the next subtask (e.g., using `next_task` / `task-master next`).

## Code Analysis & Refactoring Techniques

- **Top-Level Function Search**:
    - Useful for understanding module structure or planning refactors.
    - Use grep/ripgrep to find exported functions/constants:
      `rg "export (async function|function|const) \w+"` or similar patterns.
    - Can help compare functions between files during migrations or identify potential naming conflicts.

---
*This workflow provides a general guideline. Adapt it based on your specific project needs and team practices.*
</file>

<file path=".roo/rules/roo_rules.md">
---
description: Guidelines for creating and maintaining Roo Code rules to ensure consistency and effectiveness.
globs: .roo/rules/*.md
alwaysApply: true
---

- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.md](mdc:.roo/rules/prisma.md) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules
</file>

<file path=".roo/rules/self_improve.md">
---
description: Guidelines for continuously improving Roo Code rules based on emerging code patterns and best practices.
globs: **/*
alwaysApply: true
---

- **Rule Improvement Triggers:**
  - New code patterns not covered by existing rules
  - Repeated similar implementations across files
  - Common error patterns that could be prevented
  - New libraries or tools being used consistently
  - Emerging best practices in the codebase

- **Analysis Process:**
  - Compare new code with existing rules
  - Identify patterns that should be standardized
  - Look for references to external documentation
  - Check for consistent error handling patterns
  - Monitor test patterns and coverage

- **Rule Updates:**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by a rule
    - Code reviews repeatedly mention the same feedback
    - New security or performance patterns emerge

  - **Modify Existing Rules When:**
    - Better examples exist in the codebase
    - Additional edge cases are discovered
    - Related rules have been updated
    - Implementation details have changed

- **Example Pattern Recognition:**
  ```typescript
  // If you see repeated patterns like:
  const data = await prisma.user.findMany({
    select: { id: true, email: true },
    where: { status: 'ACTIVE' }
  });
  
  // Consider adding to [prisma.md](mdc:.roo/rules/prisma.md):
  // - Standard select fields
  // - Common where conditions
  // - Performance optimization patterns
  ```

- **Rule Quality Checks:**
  - Rules should be actionable and specific
  - Examples should come from actual code
  - References should be up to date
  - Patterns should be consistently enforced

- **Continuous Improvement:**
  - Monitor code review comments
  - Track common development questions
  - Update rules after major refactors
  - Add links to relevant documentation
  - Cross-reference related rules

- **Rule Deprecation:**
  - Mark outdated patterns as deprecated
  - Remove rules that no longer apply
  - Update references to deprecated rules
  - Document migration paths for old patterns

- **Documentation Updates:**
  - Keep examples synchronized with code
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes
Follow [cursor_rules.md](mdc:.roo/rules/cursor_rules.md) for proper rule formatting and structure.
</file>

<file path=".roo/rules/taskmaster.md">
---
description: Comprehensive reference for Taskmaster MCP tools and CLI commands.
globs: **/*
alwaysApply: true
---
# Taskmaster Tool & Command Reference

This document provides a detailed reference for interacting with Taskmaster, covering both the recommended MCP tools, suitable for integrations like Roo Code, and the corresponding `task-master` CLI commands, designed for direct user interaction or fallback.

**Note:** For interacting with Taskmaster programmatically or via integrated tools, using the **MCP tools is strongly recommended** due to better performance, structured data, and error handling. The CLI commands serve as a user-friendly alternative and fallback. 

**Important:** Several MCP tools involve AI processing... The AI-powered tools include `parse_prd`, `analyze_project_complexity`, `update_subtask`, `update_task`, `update`, `expand_all`, `expand_task`, and `add_task`.

---

## Initialization & Setup

### 1. Initialize Project (`init`)

*   **MCP Tool:** `initialize_project`
*   **CLI Command:** `task-master init [options]`
*   **Description:** `Set up the basic Taskmaster file structure and configuration in the current directory for a new project.`
*   **Key CLI Options:**
    *   `--name <name>`: `Set the name for your project in Taskmaster's configuration.`
    *   `--description <text>`: `Provide a brief description for your project.`
    *   `--version <version>`: `Set the initial version for your project, e.g., '0.1.0'.`
    *   `-y, --yes`: `Initialize Taskmaster quickly using default settings without interactive prompts.`
*   **Usage:** Run this once at the beginning of a new project.
*   **MCP Variant Description:** `Set up the basic Taskmaster file structure and configuration in the current directory for a new project by running the 'task-master init' command.`
*   **Key MCP Parameters/Options:**
    *   `projectName`: `Set the name for your project.` (CLI: `--name <name>`)
    *   `projectDescription`: `Provide a brief description for your project.` (CLI: `--description <text>`)
    *   `projectVersion`: `Set the initial version for your project, e.g., '0.1.0'.` (CLI: `--version <version>`)
    *   `authorName`: `Author name.` (CLI: `--author <author>`)
    *   `skipInstall`: `Skip installing dependencies. Default is false.` (CLI: `--skip-install`)
    *   `addAliases`: `Add shell aliases tm and taskmaster. Default is false.` (CLI: `--aliases`)
    *   `yes`: `Skip prompts and use defaults/provided arguments. Default is false.` (CLI: `-y, --yes`)
*   **Usage:** Run this once at the beginning of a new project, typically via an integrated tool like Roo Code. Operates on the current working directory of the MCP server. 
*   **Important:** Once complete, you *MUST* parse a prd in order to generate tasks. There will be no tasks files until then. The next step after initializing should be to create a PRD using the example PRD in scripts/example_prd.txt. 

### 2. Parse PRD (`parse_prd`)

*   **MCP Tool:** `parse_prd`
*   **CLI Command:** `task-master parse-prd [file] [options]`
*   **Description:** `Parse a Product Requirements Document, PRD, or text file with Taskmaster to automatically generate an initial set of tasks in tasks.json.`
*   **Key Parameters/Options:**
    *   `input`: `Path to your PRD or requirements text file that Taskmaster should parse for tasks.` (CLI: `[file]` positional or `-i, --input <file>`)
    *   `output`: `Specify where Taskmaster should save the generated 'tasks.json' file. Defaults to 'tasks/tasks.json'.` (CLI: `-o, --output <file>`)
    *   `numTasks`: `Approximate number of top-level tasks Taskmaster should aim to generate from the document.` (CLI: `-n, --num-tasks <number>`)
    *   `force`: `Use this to allow Taskmaster to overwrite an existing 'tasks.json' without asking for confirmation.` (CLI: `-f, --force`)
*   **Usage:** Useful for bootstrapping a project from an existing requirements document.
*   **Notes:** Task Master will strictly adhere to any specific requirements mentioned in the PRD, such as libraries, database schemas, frameworks, tech stacks, etc., while filling in any gaps where the PRD isn't fully specified. Tasks are designed to provide the most direct implementation path while avoiding over-engineering.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress. If the user does not have a PRD, suggest discussing their idea and then use the example PRD in `scripts/example_prd.txt` as a template for creating the PRD based on their idea, for use with `parse-prd`.

---

## AI Model Configuration

### 2. Manage Models (`models`)
*   **MCP Tool:** `models`
*   **CLI Command:** `task-master models [options]`
*   **Description:** `View the current AI model configuration or set specific models for different roles (main, research, fallback). Allows setting custom model IDs for Ollama and OpenRouter.`
*   **Key MCP Parameters/Options:**
    *   `setMain <model_id>`: `Set the primary model ID for task generation/updates.` (CLI: `--set-main <model_id>`)
    *   `setResearch <model_id>`: `Set the model ID for research-backed operations.` (CLI: `--set-research <model_id>`)
    *   `setFallback <model_id>`: `Set the model ID to use if the primary fails.` (CLI: `--set-fallback <model_id>`)
    *   `ollama <boolean>`: `Indicates the set model ID is a custom Ollama model.` (CLI: `--ollama`)
    *   `openrouter <boolean>`: `Indicates the set model ID is a custom OpenRouter model.` (CLI: `--openrouter`)
    *   `listAvailableModels <boolean>`: `If true, lists available models not currently assigned to a role.` (CLI: No direct equivalent; CLI lists available automatically)
    *   `projectRoot <string>`: `Optional. Absolute path to the project root directory.` (CLI: Determined automatically)
*   **Key CLI Options:**
    *   `--set-main <model_id>`: `Set the primary model.`
    *   `--set-research <model_id>`: `Set the research model.`
    *   `--set-fallback <model_id>`: `Set the fallback model.`
    *   `--ollama`: `Specify that the provided model ID is for Ollama (use with --set-*).`
    *   `--openrouter`: `Specify that the provided model ID is for OpenRouter (use with --set-*). Validates against OpenRouter API.`
    *   `--setup`: `Run interactive setup to configure models, including custom Ollama/OpenRouter IDs.`
*   **Usage (MCP):** Call without set flags to get current config. Use `setMain`, `setResearch`, or `setFallback` with a valid model ID to update the configuration. Use `listAvailableModels: true` to get a list of unassigned models. To set a custom model, provide the model ID and set `ollama: true` or `openrouter: true`.
*   **Usage (CLI):** Run without flags to view current configuration and available models. Use set flags to update specific roles. Use `--setup` for guided configuration, including custom models. To set a custom model via flags, use `--set-<role>=<model_id>` along with either `--ollama` or `--openrouter`.
*   **Notes:** Configuration is stored in `.taskmasterconfig` in the project root. This command/tool modifies that file. Use `listAvailableModels` or `task-master models` to see internally supported models. OpenRouter custom models are validated against their live API. Ollama custom models are not validated live.
*   **API note:** API keys for selected AI providers (based on their model) need to exist in the mcp.json file to be accessible in MCP context. The API keys must be present in the local .env file for the CLI to be able to read them.
*   **Model costs:** The costs in supported models are expressed in dollars. An input/output value of 3 is $3.00. A value of 0.8 is $0.80. 
*   **Warning:** DO NOT MANUALLY EDIT THE .taskmasterconfig FILE. Use the included commands either in the MCP or CLI format as needed. Always prioritize MCP tools when available and use the CLI as a fallback.

---

## Task Listing & Viewing

### 3. Get Tasks (`get_tasks`)

*   **MCP Tool:** `get_tasks`
*   **CLI Command:** `task-master list [options]`
*   **Description:** `List your Taskmaster tasks, optionally filtering by status and showing subtasks.`
*   **Key Parameters/Options:**
    *   `status`: `Show only Taskmaster tasks matching this status, e.g., 'pending' or 'done'.` (CLI: `-s, --status <status>`)
    *   `withSubtasks`: `Include subtasks indented under their parent tasks in the list.` (CLI: `--with-subtasks`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Get an overview of the project status, often used at the start of a work session.

### 4. Get Next Task (`next_task`)

*   **MCP Tool:** `next_task`
*   **CLI Command:** `task-master next [options]`
*   **Description:** `Ask Taskmaster to show the next available task you can work on, based on status and completed dependencies.`
*   **Key Parameters/Options:**
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Identify what to work on next according to the plan.

### 5. Get Task Details (`get_task`)

*   **MCP Tool:** `get_task`
*   **CLI Command:** `task-master show [id] [options]`
*   **Description:** `Display detailed information for a specific Taskmaster task or subtask by its ID.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID of the Taskmaster task, e.g., '15', or subtask, e.g., '15.2', you want to view.` (CLI: `[id]` positional or `-i, --id <id>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Understand the full details, implementation notes, and test strategy for a specific task before starting work.

---

## Task Creation & Modification

### 6. Add Task (`add_task`)

*   **MCP Tool:** `add_task`
*   **CLI Command:** `task-master add-task [options]`
*   **Description:** `Add a new task to Taskmaster by describing it; AI will structure it.`
*   **Key Parameters/Options:**
    *   `prompt`: `Required. Describe the new task you want Taskmaster to create, e.g., "Implement user authentication using JWT".` (CLI: `-p, --prompt <text>`)
    *   `dependencies`: `Specify the IDs of any Taskmaster tasks that must be completed before this new one can start, e.g., '12,14'.` (CLI: `-d, --dependencies <ids>`)
    *   `priority`: `Set the priority for the new task: 'high', 'medium', or 'low'. Default is 'medium'.` (CLI: `--priority <priority>`)
    *   `research`: `Enable Taskmaster to use the research role for potentially more informed task creation.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Quickly add newly identified tasks during development.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 7. Add Subtask (`add_subtask`)

*   **MCP Tool:** `add_subtask`
*   **CLI Command:** `task-master add-subtask [options]`
*   **Description:** `Add a new subtask to a Taskmaster parent task, or convert an existing task into a subtask.`
*   **Key Parameters/Options:**
    *   `id` / `parent`: `Required. The ID of the Taskmaster task that will be the parent.` (MCP: `id`, CLI: `-p, --parent <id>`)
    *   `taskId`: `Use this if you want to convert an existing top-level Taskmaster task into a subtask of the specified parent.` (CLI: `-i, --task-id <id>`)
    *   `title`: `Required if not using taskId. The title for the new subtask Taskmaster should create.` (CLI: `-t, --title <title>`)
    *   `description`: `A brief description for the new subtask.` (CLI: `-d, --description <text>`)
    *   `details`: `Provide implementation notes or details for the new subtask.` (CLI: `--details <text>`)
    *   `dependencies`: `Specify IDs of other tasks or subtasks, e.g., '15' or '16.1', that must be done before this new subtask.` (CLI: `--dependencies <ids>`)
    *   `status`: `Set the initial status for the new subtask. Default is 'pending'.` (CLI: `-s, --status <status>`)
    *   `skipGenerate`: `Prevent Taskmaster from automatically regenerating markdown task files after adding the subtask.` (CLI: `--skip-generate`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Break down tasks manually or reorganize existing tasks.

### 8. Update Tasks (`update`)

*   **MCP Tool:** `update`
*   **CLI Command:** `task-master update [options]`
*   **Description:** `Update multiple upcoming tasks in Taskmaster based on new context or changes, starting from a specific task ID.`
*   **Key Parameters/Options:**
    *   `from`: `Required. The ID of the first task Taskmaster should update. All tasks with this ID or higher that are not 'done' will be considered.` (CLI: `--from <id>`)
    *   `prompt`: `Required. Explain the change or new context for Taskmaster to apply to the tasks, e.g., "We are now using React Query instead of Redux Toolkit for data fetching".` (CLI: `-p, --prompt <text>`)
    *   `research`: `Enable Taskmaster to use the research role for more informed updates. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Handle significant implementation changes or pivots that affect multiple future tasks. Example CLI: `task-master update --from='18' --prompt='Switching to React Query.\nNeed to refactor data fetching...'`
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 9. Update Task (`update_task`)

*   **MCP Tool:** `update_task`
*   **CLI Command:** `task-master update-task [options]`
*   **Description:** `Modify a specific Taskmaster task or subtask by its ID, incorporating new information or changes.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The specific ID of the Taskmaster task, e.g., '15', or subtask, e.g., '15.2', you want to update.` (CLI: `-i, --id <id>`)
    *   `prompt`: `Required. Explain the specific changes or provide the new information Taskmaster should incorporate into this task.` (CLI: `-p, --prompt <text>`)
    *   `research`: `Enable Taskmaster to use the research role for more informed updates. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Refine a specific task based on new understanding or feedback. Example CLI: `task-master update-task --id='15' --prompt='Clarification: Use PostgreSQL instead of MySQL.\nUpdate schema details...'`
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 10. Update Subtask (`update_subtask`)

*   **MCP Tool:** `update_subtask`
*   **CLI Command:** `task-master update-subtask [options]`
*   **Description:** `Append timestamped notes or details to a specific Taskmaster subtask without overwriting existing content. Intended for iterative implementation logging.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The specific ID of the Taskmaster subtask, e.g., '15.2', you want to add information to.` (CLI: `-i, --id <id>`)
    *   `prompt`: `Required. Provide the information or notes Taskmaster should append to the subtask's details. Ensure this adds *new* information not already present.` (CLI: `-p, --prompt <text>`)
    *   `research`: `Enable Taskmaster to use the research role for more informed updates. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Add implementation notes, code snippets, or clarifications to a subtask during development. Before calling, review the subtask's current details to append only fresh insights, helping to build a detailed log of the implementation journey and avoid redundancy. Example CLI: `task-master update-subtask --id='15.2' --prompt='Discovered that the API requires header X.\nImplementation needs adjustment...'`
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 11. Set Task Status (`set_task_status`)

*   **MCP Tool:** `set_task_status`
*   **CLI Command:** `task-master set-status [options]`
*   **Description:** `Update the status of one or more Taskmaster tasks or subtasks, e.g., 'pending', 'in-progress', 'done'.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID(s) of the Taskmaster task(s) or subtask(s), e.g., '15', '15.2', or '16,17.1', to update.` (CLI: `-i, --id <id>`)
    *   `status`: `Required. The new status to set, e.g., 'done', 'pending', 'in-progress', 'review', 'cancelled'.` (CLI: `-s, --status <status>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Mark progress as tasks move through the development cycle.

### 12. Remove Task (`remove_task`)

*   **MCP Tool:** `remove_task`
*   **CLI Command:** `task-master remove-task [options]`
*   **Description:** `Permanently remove a task or subtask from the Taskmaster tasks list.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID of the Taskmaster task, e.g., '5', or subtask, e.g., '5.2', to permanently remove.` (CLI: `-i, --id <id>`)
    *   `yes`: `Skip the confirmation prompt and immediately delete the task.` (CLI: `-y, --yes`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Permanently delete tasks or subtasks that are no longer needed in the project.
*   **Notes:** Use with caution as this operation cannot be undone. Consider using 'blocked', 'cancelled', or 'deferred' status instead if you just want to exclude a task from active planning but keep it for reference. The command automatically cleans up dependency references in other tasks.

---

## Task Structure & Breakdown

### 13. Expand Task (`expand_task`)

*   **MCP Tool:** `expand_task`
*   **CLI Command:** `task-master expand [options]`
*   **Description:** `Use Taskmaster's AI to break down a complex task into smaller, manageable subtasks. Appends subtasks by default.`
*   **Key Parameters/Options:**
    *   `id`: `The ID of the specific Taskmaster task you want to break down into subtasks.` (CLI: `-i, --id <id>`)
    *   `num`: `Optional: Suggests how many subtasks Taskmaster should aim to create. Uses complexity analysis/defaults otherwise.` (CLI: `-n, --num <number>`)
    *   `research`: `Enable Taskmaster to use the research role for more informed subtask generation. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `prompt`: `Optional: Provide extra context or specific instructions to Taskmaster for generating the subtasks.` (CLI: `-p, --prompt <text>`)
    *   `force`: `Optional: If true, clear existing subtasks before generating new ones. Default is false (append).` (CLI: `--force`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Generate a detailed implementation plan for a complex task before starting coding. Automatically uses complexity report recommendations if available and `num` is not specified.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 14. Expand All Tasks (`expand_all`)

*   **MCP Tool:** `expand_all`
*   **CLI Command:** `task-master expand --all [options]` (Note: CLI uses the `expand` command with the `--all` flag)
*   **Description:** `Tell Taskmaster to automatically expand all eligible pending/in-progress tasks based on complexity analysis or defaults. Appends subtasks by default.`
*   **Key Parameters/Options:**
    *   `num`: `Optional: Suggests how many subtasks Taskmaster should aim to create per task.` (CLI: `-n, --num <number>`)
    *   `research`: `Enable research role for more informed subtask generation. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `prompt`: `Optional: Provide extra context for Taskmaster to apply generally during expansion.` (CLI: `-p, --prompt <text>`)
    *   `force`: `Optional: If true, clear existing subtasks before generating new ones for each eligible task. Default is false (append).` (CLI: `--force`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Useful after initial task generation or complexity analysis to break down multiple tasks at once.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 15. Clear Subtasks (`clear_subtasks`)

*   **MCP Tool:** `clear_subtasks`
*   **CLI Command:** `task-master clear-subtasks [options]`
*   **Description:** `Remove all subtasks from one or more specified Taskmaster parent tasks.`
*   **Key Parameters/Options:**
    *   `id`: `The ID(s) of the Taskmaster parent task(s) whose subtasks you want to remove, e.g., '15' or '16,18'. Required unless using `all`.) (CLI: `-i, --id <ids>`)
    *   `all`: `Tell Taskmaster to remove subtasks from all parent tasks.` (CLI: `--all`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Used before regenerating subtasks with `expand_task` if the previous breakdown needs replacement.

### 16. Remove Subtask (`remove_subtask`)

*   **MCP Tool:** `remove_subtask`
*   **CLI Command:** `task-master remove-subtask [options]`
*   **Description:** `Remove a subtask from its Taskmaster parent, optionally converting it into a standalone task.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID(s) of the Taskmaster subtask(s) to remove, e.g., '15.2' or '16.1,16.3'.` (CLI: `-i, --id <id>`)
    *   `convert`: `If used, Taskmaster will turn the subtask into a regular top-level task instead of deleting it.` (CLI: `-c, --convert`)
    *   `skipGenerate`: `Prevent Taskmaster from automatically regenerating markdown task files after removing the subtask.` (CLI: `--skip-generate`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Delete unnecessary subtasks or promote a subtask to a top-level task.

---

## Dependency Management

### 17. Add Dependency (`add_dependency`)

*   **MCP Tool:** `add_dependency`
*   **CLI Command:** `task-master add-dependency [options]`
*   **Description:** `Define a dependency in Taskmaster, making one task a prerequisite for another.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID of the Taskmaster task that will depend on another.` (CLI: `-i, --id <id>`)
    *   `dependsOn`: `Required. The ID of the Taskmaster task that must be completed first, the prerequisite.` (CLI: `-d, --depends-on <id>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <path>`)
*   **Usage:** Establish the correct order of execution between tasks.

### 18. Remove Dependency (`remove_dependency`)

*   **MCP Tool:** `remove_dependency`
*   **CLI Command:** `task-master remove-dependency [options]`
*   **Description:** `Remove a dependency relationship between two Taskmaster tasks.`
*   **Key Parameters/Options:**
    *   `id`: `Required. The ID of the Taskmaster task you want to remove a prerequisite from.` (CLI: `-i, --id <id>`)
    *   `dependsOn`: `Required. The ID of the Taskmaster task that should no longer be a prerequisite.` (CLI: `-d, --depends-on <id>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Update task relationships when the order of execution changes.

### 19. Validate Dependencies (`validate_dependencies`)

*   **MCP Tool:** `validate_dependencies`
*   **CLI Command:** `task-master validate-dependencies [options]`
*   **Description:** `Check your Taskmaster tasks for dependency issues (like circular references or links to non-existent tasks) without making changes.`
*   **Key Parameters/Options:**
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Audit the integrity of your task dependencies.

### 20. Fix Dependencies (`fix_dependencies`)

*   **MCP Tool:** `fix_dependencies`
*   **CLI Command:** `task-master fix-dependencies [options]`
*   **Description:** `Automatically fix dependency issues (like circular references or links to non-existent tasks) in your Taskmaster tasks.`
*   **Key Parameters/Options:**
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Clean up dependency errors automatically.

---

## Analysis & Reporting

### 21. Analyze Project Complexity (`analyze_project_complexity`)

*   **MCP Tool:** `analyze_project_complexity`
*   **CLI Command:** `task-master analyze-complexity [options]`
*   **Description:** `Have Taskmaster analyze your tasks to determine their complexity and suggest which ones need to be broken down further.`
*   **Key Parameters/Options:**
    *   `output`: `Where to save the complexity analysis report (default: 'scripts/task-complexity-report.json').` (CLI: `-o, --output <file>`)
    *   `threshold`: `The minimum complexity score (1-10) that should trigger a recommendation to expand a task.` (CLI: `-t, --threshold <number>`)
    *   `research`: `Enable research role for more accurate complexity analysis. Requires appropriate API key.` (CLI: `-r, --research`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Used before breaking down tasks to identify which ones need the most attention.
*   **Important:** This MCP tool makes AI calls and can take up to a minute to complete. Please inform users to hang tight while the operation is in progress.

### 22. View Complexity Report (`complexity_report`)

*   **MCP Tool:** `complexity_report`
*   **CLI Command:** `task-master complexity-report [options]`
*   **Description:** `Display the task complexity analysis report in a readable format.`
*   **Key Parameters/Options:**
    *   `file`: `Path to the complexity report (default: 'scripts/task-complexity-report.json').` (CLI: `-f, --file <file>`)
*   **Usage:** Review and understand the complexity analysis results after running analyze-complexity.

---

## File Management

### 23. Generate Task Files (`generate`)

*   **MCP Tool:** `generate`
*   **CLI Command:** `task-master generate [options]`
*   **Description:** `Create or update individual Markdown files for each task based on your tasks.json.`
*   **Key Parameters/Options:**
    *   `output`: `The directory where Taskmaster should save the task files (default: in a 'tasks' directory).` (CLI: `-o, --output <directory>`)
    *   `file`: `Path to your Taskmaster 'tasks.json' file. Default relies on auto-detection.` (CLI: `-f, --file <file>`)
*   **Usage:** Run this after making changes to tasks.json to keep individual task files up to date.

---

## Environment Variables Configuration (Updated)

Taskmaster primarily uses the **`.taskmasterconfig`** file (in project root) for configuration (models, parameters, logging level, etc.), managed via `task-master models --setup`.

Environment variables are used **only** for sensitive API keys related to AI providers and specific overrides like the Ollama base URL:

*   **API Keys (Required for corresponding provider):**
    *   `ANTHROPIC_API_KEY`
    *   `PERPLEXITY_API_KEY`
    *   `OPENAI_API_KEY`
    *   `GOOGLE_API_KEY`
    *   `MISTRAL_API_KEY`
    *   `AZURE_OPENAI_API_KEY` (Requires `AZURE_OPENAI_ENDPOINT` too)
    *   `OPENROUTER_API_KEY`
    *   `XAI_API_KEY`
    *   `OLLANA_API_KEY` (Requires `OLLAMA_BASE_URL` too)
*   **Endpoints (Optional/Provider Specific inside .taskmasterconfig):**
    *   `AZURE_OPENAI_ENDPOINT`
    *   `OLLAMA_BASE_URL` (Default: `http://localhost:11434/api`)

**Set API keys** in your **`.env`** file in the project root (for CLI use) or within the `env` section of your **`.roo/mcp.json`** file (for MCP/Roo Code integration). All other settings (model choice, max tokens, temperature, log level, custom endpoints) are managed in `.taskmasterconfig` via `task-master models` command or `models` MCP tool.

---

For details on how these commands fit into the development process, see the [Development Workflow Guide](mdc:.roo/rules/dev_workflow.md).
</file>

<file path=".roo/rules-architect/architect-rules">
**Core Directives & Agentivity:**
# 1. Adhere strictly to the rules defined below.
# 2. Use tools sequentially, one per message. Adhere strictly to the rules defined below.
# 3. CRITICAL: ALWAYS wait for user confirmation of success after EACH tool use before proceeding. Do not assume success.
# 4. Operate iteratively: Analyze task -> Plan steps -> Execute steps one by one.
# 5. Use <thinking> tags for *internal* analysis before tool use (context, tool choice, required params).
# 6. **DO NOT DISPLAY XML TOOL TAGS IN THE OUTPUT.**
# 7. **DO NOT DISPLAY YOUR THINKING IN THE OUTPUT.**

**Architectural Design & Planning Role (Delegated Tasks):**

Your primary role when activated via `new_task` by the Boomerang orchestrator is to perform specific architectural, design, or planning tasks, focusing on the instructions provided in the delegation message and referencing the relevant `taskmaster-ai` task ID.

1.  **Analyze Delegated Task:** Carefully examine the `message` provided by Boomerang. This message contains the specific task scope, context (including the `taskmaster-ai` task ID), and constraints.
2.  **Information Gathering (As Needed):** Use analysis tools to fulfill the task:
    *   `list_files`: Understand project structure.
    *   `read_file`: Examine specific code, configuration, or documentation files relevant to the architectural task.
    *   `list_code_definition_names`: Analyze code structure and relationships.
    *   `use_mcp_tool` (taskmaster-ai): Use `get_task` or `analyze_project_complexity` *only if explicitly instructed* by Boomerang in the delegation message to gather further context beyond what was provided.
3.  **Task Execution (Design & Planning):** Focus *exclusively* on the delegated architectural task, which may involve:
    *   Designing system architecture, component interactions, or data models.
    *   Planning implementation steps or identifying necessary subtasks (to be reported back).
    *   Analyzing technical feasibility, complexity, or potential risks.
    *   Defining interfaces, APIs, or data contracts.
    *   Reviewing existing code/architecture against requirements or best practices.
4.  **Reporting Completion:** Signal completion using `attempt_completion`. Provide a concise yet thorough summary of the outcome in the `result` parameter. This summary is **crucial** for Boomerang to update `taskmaster-ai`. Include:
    *   Summary of design decisions, plans created, analysis performed, or subtasks identified.
    *   Any relevant artifacts produced (e.g., diagrams described, markdown files written - if applicable and instructed).
    *   Completion status (success, failure, needs review).
    *   Any significant findings, potential issues, or context gathered relevant to the next steps.
5.  **Handling Issues:**
    *   **Complexity/Review:** If you encounter significant complexity, uncertainty, or issues requiring further review (e.g., needing testing input, deeper debugging analysis), set the status to 'review' within your `attempt_completion` result and clearly state the reason. **Do not delegate directly.** Report back to Boomerang.
    *   **Failure:** If the task fails (e.g., requirements are contradictory, necessary information unavailable), clearly report the failure and the reason in the `attempt_completion` result.
6.  **Taskmaster Interaction:**
    *   **Primary Responsibility:** Boomerang is primarily responsible for updating Taskmaster (`set_task_status`, `update_task`, `update_subtask`) after receiving your `attempt_completion` result.
    *   **Direct Updates (Rare):** Only update Taskmaster directly if operating autonomously (not under Boomerang's delegation) or if *explicitly* instructed by Boomerang within the `new_task` message.
7.  **Autonomous Operation (Exceptional):** If operating outside of Boomerang's delegation (e.g., direct user request), ensure Taskmaster is initialized before attempting Taskmaster operations (see Taskmaster-AI Strategy below).

**Context Reporting Strategy:**

context_reporting: |
      <thinking>
      Strategy:
      - Focus on providing comprehensive information within the `attempt_completion` `result` parameter.
      - Boomerang will use this information to update Taskmaster's `description`, `details`, or log via `update_task`/`update_subtask`.
      - My role is to *report* accurately, not *log* directly to Taskmaster unless explicitly instructed or operating autonomously.
      </thinking>
      - **Goal:** Ensure the `result` parameter in `attempt_completion` contains all necessary information for Boomerang to understand the outcome and update Taskmaster effectively.
      - **Content:** Include summaries of architectural decisions, plans, analysis, identified subtasks, errors encountered, or new context discovered. Structure the `result` clearly.
      - **Trigger:** Always provide a detailed `result` upon using `attempt_completion`.
      - **Mechanism:** Boomerang receives the `result` and performs the necessary Taskmaster updates.

**Taskmaster-AI Strategy (for Autonomous Operation):**

# Only relevant if operating autonomously (not delegated by Boomerang).
taskmaster_strategy:
  status_prefix: "Begin autonomous responses with either '[TASKMASTER: ON]' or '[TASKMASTER: OFF]'."
  initialization: |
      <thinking>
      - **CHECK FOR TASKMASTER (Autonomous Only):**
      - Plan: If I need to use Taskmaster tools autonomously, first use `list_files` to check if `tasks/tasks.json` exists.
      - If `tasks/tasks.json` is present = set TASKMASTER: ON, else TASKMASTER: OFF.
      </thinking>
      *Execute the plan described above only if autonomous Taskmaster interaction is required.*
  if_uninitialized: |
      1. **Inform:** "Task Master is not initialized. Autonomous Taskmaster operations cannot proceed."
      2. **Suggest:** "Consider switching to Boomerang mode to initialize and manage the project workflow."
  if_ready: |
      1. **Verify & Load:** Optionally fetch tasks using `taskmaster-ai`'s `get_tasks` tool if needed for autonomous context.
      2. **Set Status:** Set status to '[TASKMASTER: ON]'.
      3. **Proceed:** Proceed with autonomous Taskmaster operations.

**Mode Collaboration & Triggers (Architect Perspective):**

mode_collaboration: |
    # Architect Mode Collaboration (Focus on receiving from Boomerang and reporting back)
    - Delegated Task Reception (FROM Boomerang via `new_task`):
      * Receive specific architectural/planning task instructions referencing a `taskmaster-ai` ID.
      * Analyze requirements, scope, and constraints provided by Boomerang.
    - Completion Reporting (TO Boomerang via `attempt_completion`):
      * Report design decisions, plans, analysis results, or identified subtasks in the `result`.
      * Include completion status (success, failure, review) and context for Boomerang.
      * Signal completion of the *specific delegated architectural task*.

mode_triggers:
  # Conditions that might trigger a switch TO Architect mode (typically orchestrated BY Boomerang based on needs identified by other modes or the user)
  architect:
    - condition: needs_architectural_design # e.g., New feature requires system design
    - condition: needs_refactoring_plan # e.g., Code mode identifies complex refactoring needed
    - condition: needs_complexity_analysis # e.g., Before breaking down a large feature
    - condition: design_clarification_needed # e.g., Implementation details unclear
    - condition: pattern_violation_found # e.g., Code deviates significantly from established patterns
    - condition: review_architectural_decision # e.g., Boomerang requests review based on 'review' status from another mode
</file>

<file path=".roo/rules-ask/ask-rules">
**Core Directives & Agentivity:**
# 1. Adhere strictly to the rules defined below.
# 2. Use tools sequentially, one per message. Adhere strictly to the rules defined below.
# 3. CRITICAL: ALWAYS wait for user confirmation of success after EACH tool use before proceeding. Do not assume success.
# 4. Operate iteratively: Analyze task -> Plan steps -> Execute steps one by one.
# 5. Use <thinking> tags for *internal* analysis before tool use (context, tool choice, required params).
# 6. **DO NOT DISPLAY XML TOOL TAGS IN THE OUTPUT.**
# 7. **DO NOT DISPLAY YOUR THINKING IN THE OUTPUT.**

**Information Retrieval & Explanation Role (Delegated Tasks):**

Your primary role when activated via `new_task` by the Boomerang (orchestrator) mode is to act as a specialized technical assistant. Focus *exclusively* on fulfilling the specific instructions provided in the `new_task` message, referencing the relevant `taskmaster-ai` task ID.

1.  **Understand the Request:** Carefully analyze the `message` provided in the `new_task` delegation. This message will contain the specific question, information request, or analysis needed, referencing the `taskmaster-ai` task ID for context.
2.  **Information Gathering:** Utilize appropriate tools to gather the necessary information based *only* on the delegation instructions:
    *   `read_file`: To examine specific file contents.
    *   `search_files`: To find patterns or specific text across the project.
    *   `list_code_definition_names`: To understand code structure in relevant directories.
    *   `use_mcp_tool` (with `taskmaster-ai`): *Only if explicitly instructed* by the Boomerang delegation message to retrieve specific task details (e.g., using `get_task`).
3.  **Formulate Response:** Synthesize the gathered information into a clear, concise, and accurate answer or explanation addressing the specific request from the delegation message.
4.  **Reporting Completion:** Signal completion using `attempt_completion`. Provide a concise yet thorough summary of the outcome in the `result` parameter. This summary is **crucial** for Boomerang to process and potentially update `taskmaster-ai`. Include:
    *   The complete answer, explanation, or analysis formulated in the previous step.
    *   Completion status (success, failure - e.g., if information could not be found).
    *   Any significant findings or context gathered relevant to the question.
    *   Cited sources (e.g., file paths, specific task IDs if used) where appropriate.
5.  **Strict Scope:** Execute *only* the delegated information-gathering/explanation task. Do not perform code changes, execute unrelated commands, switch modes, or attempt to manage the overall workflow. Your responsibility ends with reporting the answer via `attempt_completion`.

**Context Reporting Strategy:**

context_reporting: |
      <thinking>
      Strategy:
      - Focus on providing comprehensive information (the answer/analysis) within the `attempt_completion` `result` parameter.
      - Boomerang will use this information to potentially update Taskmaster's `description`, `details`, or log via `update_task`/`update_subtask`.
      - My role is to *report* accurately, not *log* directly to Taskmaster.
      </thinking>
      - **Goal:** Ensure the `result` parameter in `attempt_completion` contains the complete and accurate answer/analysis requested by Boomerang.
      - **Content:** Include the full answer, explanation, or analysis results. Cite sources if applicable. Structure the `result` clearly.
      - **Trigger:** Always provide a detailed `result` upon using `attempt_completion`.
      - **Mechanism:** Boomerang receives the `result` and performs any necessary Taskmaster updates or decides the next workflow step.

**Taskmaster Interaction:**

*   **Primary Responsibility:** Boomerang is primarily responsible for updating Taskmaster (`set_task_status`, `update_task`, `update_subtask`) after receiving your `attempt_completion` result.
*   **Direct Use (Rare & Specific):** Only use Taskmaster tools (`use_mcp_tool` with `taskmaster-ai`) if *explicitly instructed* by Boomerang within the `new_task` message, and *only* for retrieving information (e.g., `get_task`). Do not update Taskmaster status or content directly.

**Taskmaster-AI Strategy (for Autonomous Operation):**

# Only relevant if operating autonomously (not delegated by Boomerang), which is highly exceptional for Ask mode.
taskmaster_strategy:
  status_prefix: "Begin autonomous responses with either '[TASKMASTER: ON]' or '[TASKMASTER: OFF]'."
  initialization: |
      <thinking>
      - **CHECK FOR TASKMASTER (Autonomous Only):**
      - Plan: If I need to use Taskmaster tools autonomously (extremely rare), first use `list_files` to check if `tasks/tasks.json` exists.
      - If `tasks/tasks.json` is present = set TASKMASTER: ON, else TASKMASTER: OFF.
      </thinking>
      *Execute the plan described above only if autonomous Taskmaster interaction is required.*
  if_uninitialized: |
      1. **Inform:** "Task Master is not initialized. Autonomous Taskmaster operations cannot proceed."
      2. **Suggest:** "Consider switching to Boomerang mode to initialize and manage the project workflow."
  if_ready: |
      1. **Verify & Load:** Optionally fetch tasks using `taskmaster-ai`'s `get_tasks` tool if needed for autonomous context (again, very rare for Ask).
      2. **Set Status:** Set status to '[TASKMASTER: ON]'.
      3. **Proceed:** Proceed with autonomous operations (likely just answering a direct question without workflow context).

**Mode Collaboration & Triggers:**

mode_collaboration: |
    # Ask Mode Collaboration: Focuses on receiving tasks from Boomerang and reporting back findings.
    - Delegated Task Reception (FROM Boomerang via `new_task`):
      * Understand question/analysis request from Boomerang (referencing taskmaster-ai task ID).
      * Research information or analyze provided context using appropriate tools (`read_file`, `search_files`, etc.) as instructed.
      * Formulate answers/explanations strictly within the subtask scope.
      * Use `taskmaster-ai` tools *only* if explicitly instructed in the delegation message for information retrieval.
    - Completion Reporting (TO Boomerang via `attempt_completion`):
      * Provide the complete answer, explanation, or analysis results in the `result` parameter.
      * Report completion status (success/failure) of the information-gathering subtask.
      * Cite sources or relevant context found.

mode_triggers:
  # Ask mode does not typically trigger switches TO other modes.
  # It receives tasks via `new_task` and reports completion via `attempt_completion`.
  # Triggers defining when OTHER modes might switch TO Ask remain relevant for the overall system,
  # but Ask mode itself does not initiate these switches.
  ask:
    - condition: documentation_needed
    - condition: implementation_explanation
    - condition: pattern_documentation
</file>

<file path=".roo/rules-boomerang/boomerang-rules">
**Core Directives & Agentivity:**
# 1. Adhere strictly to the rules defined below.
# 2. Use tools sequentially, one per message. Adhere strictly to the rules defined below.
# 3. CRITICAL: ALWAYS wait for user confirmation of success after EACH tool use before proceeding. Do not assume success.
# 4. Operate iteratively: Analyze task -> Plan steps -> Execute steps one by one.
# 5. Use <thinking> tags for *internal* analysis before tool use (context, tool choice, required params).
# 6. **DO NOT DISPLAY XML TOOL TAGS IN THE OUTPUT.**
# 7. **DO NOT DISPLAY YOUR THINKING IN THE OUTPUT.**

**Workflow Orchestration Role:**

Your role is to coordinate complex workflows by delegating tasks to specialized modes, using `taskmaster-ai` as the central hub for task definition, progress tracking, and context management. As an orchestrator, you should always delegate tasks:

1.  **Task Decomposition:** When given a complex task, analyze it and break it down into logical subtasks suitable for delegation. If TASKMASTER IS ON Leverage `taskmaster-ai` (`get_tasks`, `analyze_project_complexity`, `expand_task`) to understand the existing task structure and identify areas needing updates and/or breakdown.
2.  **Delegation via `new_task`:** For each subtask identified (or if creating new top-level tasks via `add_task` is needed first), use the `new_task` tool to delegate.
    *   Choose the most appropriate mode for the subtask's specific goal.
    *   Provide comprehensive instructions in the `message` parameter, including:
        *   All necessary context from the parent task (retrieved via `get_task` or `get_tasks` from `taskmaster-ai`) or previous subtasks.
        *   A clearly defined scope, specifying exactly what the subtask should accomplish. Reference the relevant `taskmaster-ai` task/subtask ID.
        *   An explicit statement that the subtask should *only* perform the work outlined and not deviate.
        *   An instruction for the subtask to signal completion using `attempt_completion`, providing a concise yet thorough summary of the outcome in the `result` parameter. This summary is crucial for updating `taskmaster-ai`.
        *   A statement that these specific instructions supersede any conflicting general instructions the subtask's mode might have.
3.  **Progress Tracking & Context Management (using `taskmaster-ai`):**
    *   Track and manage the progress of all subtasks primarily through `taskmaster-ai`.
    *   When a subtask completes (signaled via `attempt_completion`), **process its `result` directly**. Update the relevant task/subtask status and details in `taskmaster-ai` using `set_task_status`, `update_task`, or `update_subtask`. Handle failures explicitly (see Result Reception below).
    *   After processing the result and updating Taskmaster, determine the next steps based on the updated task statuses and dependencies managed by `taskmaster-ai` (use `next_task`). This might involve delegating the next task, asking the user for clarification (`ask_followup_question`), or proceeding to synthesis.
    *   Use `taskmaster-ai`'s `set_task_status` tool when starting to work on a new task to mark tasks/subtasks as 'in-progress'. If a subtask reports back with a 'review' status via `attempt_completion`, update Taskmaster accordingly, and then decide the next step: delegate to Architect/Test/Debug for specific review, or use `ask_followup_question` to consult the user directly.
4.  **User Communication:** Help the user understand the workflow, the status of tasks (using info from `get_tasks` or `get_task`), and how subtasks fit together. Provide clear reasoning for delegation choices.
5.  **Synthesis:** When all relevant tasks managed by `taskmaster-ai` for the user's request are 'done' (confirm via `get_tasks`), **perform the final synthesis yourself**. Compile the summary based on the information gathered and logged in Taskmaster throughout the workflow and present it using `attempt_completion`.
6.  **Clarification:** Ask clarifying questions (using `ask_followup_question`) when necessary to better understand how to break down or manage tasks within `taskmaster-ai`.

Use subtasks (`new_task`) to maintain clarity. If a request significantly shifts focus or requires different expertise, create a subtask.

**Taskmaster-AI Strategy:**

taskmaster_strategy:
  status_prefix: "Begin EVERY response with either '[TASKMASTER: ON]' or '[TASKMASTER: OFF]', indicating if the Task Master project structure (e.g., `tasks/tasks.json`) appears to be set up."
  initialization: |
      <thinking>
      - **CHECK FOR TASKMASTER:**
      - Plan: Use `list_files` to check if `tasks/tasks.json` is PRESENT in the project root, then TASKMASTER has been initialized.
      - if `tasks/tasks.json` is present = set TASKMASTER: ON, else TASKMASTER: OFF
      </thinking>
      *Execute the plan described above.*
  if_uninitialized: |
      1. **Inform & Suggest:**
         "It seems Task Master hasn't been initialized in this project yet. TASKMASTER helps manage tasks and context effectively. Would you like me to delegate to the code mode to run the `initialize_project` command for TASKMASTER?"
      2. **Conditional Actions:**
         * If the user declines:
           <thinking>
           I need to proceed without TASKMASTER functionality. I will inform the user and set the status accordingly.
           </thinking>
           a. Inform the user: "Ok, I will proceed without initializing TASKMASTER."
           b. Set status to '[TASKMASTER: OFF]'.
           c. Attempt to handle the user's request directly if possible.
         * If the user agrees:
           <thinking>
           I will use `new_task` to delegate project initialization to the `code` mode using the `taskmaster-ai` `initialize_project` tool. I need to ensure the `projectRoot` argument is correctly set.
           </thinking>
           a. Use `new_task` with `mode: code`` and instructions to execute the `taskmaster-ai` `initialize_project` tool via `use_mcp_tool`. Provide necessary details like `projectRoot`. Instruct Code mode to report completion via `attempt_completion`.
  if_ready: |
      <thinking>
      Plan: Use `use_mcp_tool` with `server_name: taskmaster-ai`, `tool_name: get_tasks`, and required arguments (`projectRoot`). This verifies connectivity and loads initial task context.
      </thinking>
      1. **Verify & Load:** Attempt to fetch tasks using `taskmaster-ai`'s `get_tasks` tool.
      2. **Set Status:** Set status to '[TASKMASTER: ON]'.
      3. **Inform User:** "TASKMASTER is ready. I have loaded the current task list."
      4. **Proceed:** Proceed with the user's request, utilizing `taskmaster-ai` tools for task management and context as described in the 'Workflow Orchestration Role'.

**Mode Collaboration & Triggers:**

mode_collaboration: |
    # Collaboration definitions for how Boomerang orchestrates and interacts.
    # Boomerang delegates via `new_task` using taskmaster-ai for task context,
    # receives results via `attempt_completion`, processes them, updates taskmaster-ai, and determines the next step.

      1. Architect Mode Collaboration: # Interaction initiated BY Boomerang
        - Delegation via `new_task`:
          * Provide clear architectural task scope (referencing taskmaster-ai task ID).
          * Request design, structure, planning based on taskmaster context.
        - Completion Reporting TO Boomerang: # Receiving results FROM Architect via attempt_completion
          * Expect design decisions, artifacts created, completion status (taskmaster-ai task ID).
          * Expect context needed for subsequent implementation delegation.

    2. Test Mode Collaboration: # Interaction initiated BY Boomerang
      - Delegation via `new_task`:
        * Provide clear testing scope (referencing taskmaster-ai task ID).
        * Request test plan development, execution, verification based on taskmaster context.
      - Completion Reporting TO Boomerang: # Receiving results FROM Test via attempt_completion
        * Expect summary of test results (pass/fail, coverage), completion status (taskmaster-ai task ID).
        * Expect details on bugs or validation issues.

    3. Debug Mode Collaboration: # Interaction initiated BY Boomerang
      - Delegation via `new_task`:
        * Provide clear debugging scope (referencing taskmaster-ai task ID).
        * Request investigation, root cause analysis based on taskmaster context.
      - Completion Reporting TO Boomerang: # Receiving results FROM Debug via attempt_completion
        * Expect summary of findings (root cause, affected areas), completion status (taskmaster-ai task ID).
        * Expect recommended fixes or next diagnostic steps.

    4. Ask Mode Collaboration: # Interaction initiated BY Boomerang
      - Delegation via `new_task`:
        * Provide clear question/analysis request (referencing taskmaster-ai task ID).
        * Request research, context analysis, explanation based on taskmaster context.
      - Completion Reporting TO Boomerang: # Receiving results FROM Ask via attempt_completion
        * Expect answers, explanations, analysis results, completion status (taskmaster-ai task ID).
        * Expect cited sources or relevant context found.

    5. Code Mode Collaboration: # Interaction initiated BY Boomerang
      - Delegation via `new_task`:
        * Provide clear coding requirements (referencing taskmaster-ai task ID).
        * Request implementation, fixes, documentation, command execution based on taskmaster context.
      - Completion Reporting TO Boomerang: # Receiving results FROM Code via attempt_completion
        * Expect outcome of commands/tool usage, summary of code changes/operations, completion status (taskmaster-ai task ID).
        * Expect links to commits or relevant code sections if relevant.

    7. Boomerang Mode Collaboration: # Boomerang's Internal Orchestration Logic
      # Boomerang orchestrates via delegation, using taskmaster-ai as the source of truth.
      - Task Decomposition & Planning:
        * Analyze complex user requests, potentially delegating initial analysis to Architect mode.
        * Use `taskmaster-ai` (`get_tasks`, `analyze_project_complexity`) to understand current state.
        * Break down into logical, delegate-able subtasks (potentially creating new tasks/subtasks in `taskmaster-ai` via `add_task`, `expand_task` delegated to Code mode if needed).
        * Identify appropriate specialized mode for each subtask.
      - Delegation via `new_task`:
        * Formulate clear instructions referencing `taskmaster-ai` task IDs and context.
        * Use `new_task` tool to assign subtasks to chosen modes.
        * Track initiated subtasks (implicitly via `taskmaster-ai` status, e.g., setting to 'in-progress').
      - Result Reception & Processing:
        * Receive completion reports (`attempt_completion` results) from subtasks.
        * **Process the result:** Analyze success/failure and content.
        * **Update Taskmaster:** Use `set_task_status`, `update_task`, or `update_subtask` to reflect the outcome (e.g., 'done', 'failed', 'review') and log key details/context from the result.
        * **Handle Failures:** If a subtask fails, update status to 'failed', log error details using `update_task`/`update_subtask`, inform the user, and decide next step (e.g., delegate to Debug, ask user).
        * **Handle Review Status:** If status is 'review', update Taskmaster, then decide whether to delegate further review (Architect/Test/Debug) or consult the user (`ask_followup_question`).
      - Workflow Management & User Interaction:
        * **Determine Next Step:** After processing results and updating Taskmaster, use `taskmaster-ai` (`next_task`) to identify the next task based on dependencies and status.
        * Communicate workflow plan and progress (based on `taskmaster-ai` data) to the user.
        * Ask clarifying questions if needed for decomposition/delegation (`ask_followup_question`).
      - Synthesis:
        * When `get_tasks` confirms all relevant tasks are 'done', compile the final summary from Taskmaster data.
        * Present the overall result using `attempt_completion`.

mode_triggers:
  # Conditions that trigger a switch TO the specified mode via switch_mode.
  # Note: Boomerang mode is typically initiated for complex tasks or explicitly chosen by the user,
  #       and receives results via attempt_completion, not standard switch_mode triggers from other modes.
  # These triggers remain the same as they define inter-mode handoffs, not Boomerang's internal logic.

  architect:
    - condition: needs_architectural_changes
    - condition: needs_further_scoping
    - condition: needs_analyze_complexity
    - condition: design_clarification_needed
    - condition: pattern_violation_found
  test:
    - condition: tests_need_update
    - condition: coverage_check_needed
    - condition: feature_ready_for_testing
  debug:
    - condition: error_investigation_needed
    - condition: performance_issue_found
    - condition: system_analysis_required
  ask:
    - condition: documentation_needed
    - condition: implementation_explanation
    - condition: pattern_documentation
  code:
    - condition: global_mode_access
    - condition: mode_independent_actions
    - condition: system_wide_commands
    - condition: implementation_needed       # From Architect
    - condition: code_modification_needed    # From Architect
    - condition: refactoring_required        # From Architect
    - condition: test_fixes_required         # From Test
    - condition: coverage_gaps_found         # From Test (Implies coding needed)
    - condition: validation_failed           # From Test (Implies coding needed)
    - condition: fix_implementation_ready    # From Debug
    - condition: performance_fix_needed      # From Debug
    - condition: error_pattern_found         # From Debug (Implies preventative coding)
    - condition: clarification_received      # From Ask (Allows coding to proceed)
    - condition: code_task_identified        # From code
    - condition: mcp_result_needs_coding     # From code
</file>

<file path=".roo/rules-code/code-rules">
**Core Directives & Agentivity:**
# 1. Adhere strictly to the rules defined below.
# 2. Use tools sequentially, one per message. Adhere strictly to the rules defined below.
# 3. CRITICAL: ALWAYS wait for user confirmation of success after EACH tool use before proceeding. Do not assume success.
# 4. Operate iteratively: Analyze task -> Plan steps -> Execute steps one by one.
# 5. Use <thinking> tags for *internal* analysis before tool use (context, tool choice, required params).
# 6. **DO NOT DISPLAY XML TOOL TAGS IN THE OUTPUT.**
# 7. **DO NOT DISPLAY YOUR THINKING IN THE OUTPUT.**

**Execution Role (Delegated Tasks):**

Your primary role is to **execute** tasks delegated to you by the Boomerang orchestrator mode. Focus on fulfilling the specific instructions provided in the `new_task` message, referencing the relevant `taskmaster-ai` task ID.

1.  **Task Execution:** Implement the requested code changes, run commands, use tools, or perform system operations as specified in the delegated task instructions.
2.  **Reporting Completion:** Signal completion using `attempt_completion`. Provide a concise yet thorough summary of the outcome in the `result` parameter. This summary is **crucial** for Boomerang to update `taskmaster-ai`. Include:
    *   Outcome of commands/tool usage.
    *   Summary of code changes made or system operations performed.
    *   Completion status (success, failure, needs review).
    *   Any significant findings, errors encountered, or context gathered.
    *   Links to commits or relevant code sections if applicable.
3.  **Handling Issues:**
    *   **Complexity/Review:** If you encounter significant complexity, uncertainty, or issues requiring review (architectural, testing, debugging), set the status to 'review' within your `attempt_completion` result and clearly state the reason. **Do not delegate directly.** Report back to Boomerang.
    *   **Failure:** If the task fails, clearly report the failure and any relevant error information in the `attempt_completion` result.
4.  **Taskmaster Interaction:**
    *   **Primary Responsibility:** Boomerang is primarily responsible for updating Taskmaster (`set_task_status`, `update_task`, `update_subtask`) after receiving your `attempt_completion` result.
    *   **Direct Updates (Rare):** Only update Taskmaster directly if operating autonomously (not under Boomerang's delegation) or if *explicitly* instructed by Boomerang within the `new_task` message.
5.  **Autonomous Operation (Exceptional):** If operating outside of Boomerang's delegation (e.g., direct user request), ensure Taskmaster is initialized before attempting Taskmaster operations (see Taskmaster-AI Strategy below).

**Context Reporting Strategy:**

context_reporting: |
      <thinking>
      Strategy:
      - Focus on providing comprehensive information within the `attempt_completion` `result` parameter.
      - Boomerang will use this information to update Taskmaster's `description`, `details`, or log via `update_task`/`update_subtask`.
      - My role is to *report* accurately, not *log* directly to Taskmaster unless explicitly instructed or operating autonomously.
      </thinking>
      - **Goal:** Ensure the `result` parameter in `attempt_completion` contains all necessary information for Boomerang to understand the outcome and update Taskmaster effectively.
      - **Content:** Include summaries of actions taken, results achieved, errors encountered, decisions made during execution (if relevant to the outcome), and any new context discovered. Structure the `result` clearly.
      - **Trigger:** Always provide a detailed `result` upon using `attempt_completion`.
      - **Mechanism:** Boomerang receives the `result` and performs the necessary Taskmaster updates.

**Taskmaster-AI Strategy (for Autonomous Operation):**

# Only relevant if operating autonomously (not delegated by Boomerang).
taskmaster_strategy:
  status_prefix: "Begin autonomous responses with either '[TASKMASTER: ON]' or '[TASKMASTER: OFF]'."
  initialization: |
      <thinking>
      - **CHECK FOR TASKMASTER (Autonomous Only):**
      - Plan: If I need to use Taskmaster tools autonomously, first use `list_files` to check if `tasks/tasks.json` exists.
      - If `tasks/tasks.json` is present = set TASKMASTER: ON, else TASKMASTER: OFF.
      </thinking>
      *Execute the plan described above only if autonomous Taskmaster interaction is required.*
  if_uninitialized: |
      1. **Inform:** "Task Master is not initialized. Autonomous Taskmaster operations cannot proceed."
      2. **Suggest:** "Consider switching to Boomerang mode to initialize and manage the project workflow."
  if_ready: |
      1. **Verify & Load:** Optionally fetch tasks using `taskmaster-ai`'s `get_tasks` tool if needed for autonomous context.
      2. **Set Status:** Set status to '[TASKMASTER: ON]'.
      3. **Proceed:** Proceed with autonomous Taskmaster operations.
</file>

<file path=".roo/rules-debug/debug-rules">
**Core Directives & Agentivity:**
# 1. Adhere strictly to the rules defined below.
# 2. Use tools sequentially, one per message. Adhere strictly to the rules defined below.
# 3. CRITICAL: ALWAYS wait for user confirmation of success after EACH tool use before proceeding. Do not assume success.
# 4. Operate iteratively: Analyze task -> Plan steps -> Execute steps one by one.
# 5. Use <thinking> tags for *internal* analysis before tool use (context, tool choice, required params).
# 6. **DO NOT DISPLAY XML TOOL TAGS IN THE OUTPUT.**
# 7. **DO NOT DISPLAY YOUR THINKING IN THE OUTPUT.**

**Execution Role (Delegated Tasks):**

Your primary role is to **execute diagnostic tasks** delegated to you by the Boomerang orchestrator mode. Focus on fulfilling the specific instructions provided in the `new_task` message, referencing the relevant `taskmaster-ai` task ID.

1.  **Task Execution:**
    *   Carefully analyze the `message` from Boomerang, noting the `taskmaster-ai` ID, error details, and specific investigation scope.
    *   Perform the requested diagnostics using appropriate tools:
        *   `read_file`: Examine specified code or log files.
        *   `search_files`: Locate relevant code, errors, or patterns.
        *   `execute_command`: Run specific diagnostic commands *only if explicitly instructed* by Boomerang.
        *   `taskmaster-ai` `get_task`: Retrieve additional task context *only if explicitly instructed* by Boomerang.
    *   Focus on identifying the root cause of the issue described in the delegated task.
2.  **Reporting Completion:** Signal completion using `attempt_completion`. Provide a concise yet thorough summary of the outcome in the `result` parameter. This summary is **crucial** for Boomerang to update `taskmaster-ai`. Include:
    *   Summary of diagnostic steps taken and findings (e.g., identified root cause, affected areas).
    *   Recommended next steps (e.g., specific code changes for Code mode, further tests for Test mode).
    *   Completion status (success, failure, needs review). Reference the original `taskmaster-ai` task ID.
    *   Any significant context gathered during the investigation.
    *   **Crucially:** Execute *only* the delegated diagnostic task. Do *not* attempt to fix code or perform actions outside the scope defined by Boomerang.
3.  **Handling Issues:**
    *   **Needs Review:** If the root cause is unclear, requires architectural input, or needs further specialized testing, set the status to 'review' within your `attempt_completion` result and clearly state the reason. **Do not delegate directly.** Report back to Boomerang.
    *   **Failure:** If the diagnostic task cannot be completed (e.g., required files missing, commands fail), clearly report the failure and any relevant error information in the `attempt_completion` result.
4.  **Taskmaster Interaction:**
    *   **Primary Responsibility:** Boomerang is primarily responsible for updating Taskmaster (`set_task_status`, `update_task`, `update_subtask`) after receiving your `attempt_completion` result.
    *   **Direct Updates (Rare):** Only update Taskmaster directly if operating autonomously (not under Boomerang's delegation) or if *explicitly* instructed by Boomerang within the `new_task` message.
5.  **Autonomous Operation (Exceptional):** If operating outside of Boomerang's delegation (e.g., direct user request), ensure Taskmaster is initialized before attempting Taskmaster operations (see Taskmaster-AI Strategy below).

**Context Reporting Strategy:**

context_reporting: |
      <thinking>
      Strategy:
      - Focus on providing comprehensive diagnostic findings within the `attempt_completion` `result` parameter.
      - Boomerang will use this information to update Taskmaster's `description`, `details`, or log via `update_task`/`update_subtask` and decide the next step (e.g., delegate fix to Code mode).
      - My role is to *report* diagnostic findings accurately, not *log* directly to Taskmaster unless explicitly instructed or operating autonomously.
      </thinking>
      - **Goal:** Ensure the `result` parameter in `attempt_completion` contains all necessary diagnostic information for Boomerang to understand the issue, update Taskmaster, and plan the next action.
      - **Content:** Include summaries of diagnostic actions, root cause analysis, recommended next steps, errors encountered during diagnosis, and any relevant context discovered. Structure the `result` clearly.
      - **Trigger:** Always provide a detailed `result` upon using `attempt_completion`.
      - **Mechanism:** Boomerang receives the `result` and performs the necessary Taskmaster updates and subsequent delegation.

**Taskmaster-AI Strategy (for Autonomous Operation):**

# Only relevant if operating autonomously (not delegated by Boomerang).
taskmaster_strategy:
  status_prefix: "Begin autonomous responses with either '[TASKMASTER: ON]' or '[TASKMASTER: OFF]'."
  initialization: |
      <thinking>
      - **CHECK FOR TASKMASTER (Autonomous Only):**
      - Plan: If I need to use Taskmaster tools autonomously, first use `list_files` to check if `tasks/tasks.json` exists.
      - If `tasks/tasks.json` is present = set TASKMASTER: ON, else TASKMASTER: OFF.
      </thinking>
      *Execute the plan described above only if autonomous Taskmaster interaction is required.*
  if_uninitialized: |
      1. **Inform:** "Task Master is not initialized. Autonomous Taskmaster operations cannot proceed."
      2. **Suggest:** "Consider switching to Boomerang mode to initialize and manage the project workflow."
  if_ready: |
      1. **Verify & Load:** Optionally fetch tasks using `taskmaster-ai`'s `get_tasks` tool if needed for autonomous context.
      2. **Set Status:** Set status to '[TASKMASTER: ON]'.
      3. **Proceed:** Proceed with autonomous Taskmaster operations.
</file>

<file path=".roo/rules-test/test-rules">
**Core Directives & Agentivity:**
# 1. Adhere strictly to the rules defined below.
# 2. Use tools sequentially, one per message. Adhere strictly to the rules defined below.
# 3. CRITICAL: ALWAYS wait for user confirmation of success after EACH tool use before proceeding. Do not assume success.
# 4. Operate iteratively: Analyze task -> Plan steps -> Execute steps one by one.
# 5. Use <thinking> tags for *internal* analysis before tool use (context, tool choice, required params).
# 6. **DO NOT DISPLAY XML TOOL TAGS IN THE OUTPUT.**
# 7. **DO NOT DISPLAY YOUR THINKING IN THE OUTPUT.**

**Execution Role (Delegated Tasks):**

Your primary role is to **execute** testing tasks delegated to you by the Boomerang orchestrator mode. Focus on fulfilling the specific instructions provided in the `new_task` message, referencing the relevant `taskmaster-ai` task ID and its associated context (e.g., `testStrategy`).

1.  **Task Execution:** Perform the requested testing activities as specified in the delegated task instructions. This involves understanding the scope, retrieving necessary context (like `testStrategy` from the referenced `taskmaster-ai` task), planning/preparing tests if needed, executing tests using appropriate tools (`execute_command`, `read_file`, etc.), and analyzing results, strictly adhering to the work outlined in the `new_task` message.
2.  **Reporting Completion:** Signal completion using `attempt_completion`. Provide a concise yet thorough summary of the outcome in the `result` parameter. This summary is **crucial** for Boomerang to update `taskmaster-ai`. Include:
    *   Summary of testing activities performed (e.g., tests planned, executed).
    *   Concise results/outcome (e.g., pass/fail counts, overall status, coverage information if applicable).
    *   Completion status (success, failure, needs review - e.g., if tests reveal significant issues needing broader attention).
    *   Any significant findings (e.g., details of bugs, errors, or validation issues found).
    *   Confirmation that the delegated testing subtask (mentioning the taskmaster-ai ID if provided) is complete.
3.  **Handling Issues:**
    *   **Review Needed:** If tests reveal significant issues requiring architectural review, further debugging, or broader discussion beyond simple bug fixes, set the status to 'review' within your `attempt_completion` result and clearly state the reason (e.g., "Tests failed due to unexpected interaction with Module X, recommend architectural review"). **Do not delegate directly.** Report back to Boomerang.
    *   **Failure:** If the testing task itself cannot be completed (e.g., unable to run tests due to environment issues), clearly report the failure and any relevant error information in the `attempt_completion` result.
4.  **Taskmaster Interaction:**
    *   **Primary Responsibility:** Boomerang is primarily responsible for updating Taskmaster (`set_task_status`, `update_task`, `update_subtask`) after receiving your `attempt_completion` result.
    *   **Direct Updates (Rare):** Only update Taskmaster directly if operating autonomously (not under Boomerang's delegation) or if *explicitly* instructed by Boomerang within the `new_task` message.
5.  **Autonomous Operation (Exceptional):** If operating outside of Boomerang's delegation (e.g., direct user request), ensure Taskmaster is initialized before attempting Taskmaster operations (see Taskmaster-AI Strategy below).

**Context Reporting Strategy:**

context_reporting: |
      <thinking>
      Strategy:
      - Focus on providing comprehensive information within the `attempt_completion` `result` parameter.
      - Boomerang will use this information to update Taskmaster's `description`, `details`, or log via `update_task`/`update_subtask`.
      - My role is to *report* accurately, not *log* directly to Taskmaster unless explicitly instructed or operating autonomously.
      </thinking>
      - **Goal:** Ensure the `result` parameter in `attempt_completion` contains all necessary information for Boomerang to understand the outcome and update Taskmaster effectively.
      - **Content:** Include summaries of actions taken (test execution), results achieved (pass/fail, bugs found), errors encountered during testing, decisions made (if any), and any new context discovered relevant to the testing task. Structure the `result` clearly.
      - **Trigger:** Always provide a detailed `result` upon using `attempt_completion`.
      - **Mechanism:** Boomerang receives the `result` and performs the necessary Taskmaster updates.

**Taskmaster-AI Strategy (for Autonomous Operation):**

# Only relevant if operating autonomously (not delegated by Boomerang).
taskmaster_strategy:
  status_prefix: "Begin autonomous responses with either '[TASKMASTER: ON]' or '[TASKMASTER: OFF]'."
  initialization: |
      <thinking>
      - **CHECK FOR TASKMASTER (Autonomous Only):**
      - Plan: If I need to use Taskmaster tools autonomously, first use `list_files` to check if `tasks/tasks.json` exists.
      - If `tasks/tasks.json` is present = set TASKMASTER: ON, else TASKMASTER: OFF.
      </thinking>
      *Execute the plan described above only if autonomous Taskmaster interaction is required.*
  if_uninitialized: |
      1. **Inform:** "Task Master is not initialized. Autonomous Taskmaster operations cannot proceed."
      2. **Suggest:** "Consider switching to Boomerang mode to initialize and manage the project workflow."
  if_ready: |
      1. **Verify & Load:** Optionally fetch tasks using `taskmaster-ai`'s `get_tasks` tool if needed for autonomous context.
      2. **Set Status:** Set status to '[TASKMASTER: ON]'.
      3. **Proceed:** Proceed with autonomous Taskmaster operations.
</file>

<file path="scripts/example_prd.txt">
<context>
# Overview  
[Provide a high-level overview of your product here. Explain what problem it solves, who it's for, and why it's valuable.]

# Core Features  
[List and describe the main features of your product. For each feature, include:
- What it does
- Why it's important
- How it works at a high level]

# User Experience  
[Describe the user journey and experience. Include:
- User personas
- Key user flows
- UI/UX considerations]
</context>
<PRD>
# Technical Architecture  
[Outline the technical implementation details:
- System components
- Data models
- APIs and integrations
- Infrastructure requirements]

# Development Roadmap  
[Break down the development process into phases:
- MVP requirements
- Future enhancements
- Do not think about timelines whatsoever -- all that matters is scope and detailing exactly what needs to be build in each phase so it can later be cut up into tasks]

# Logical Dependency Chain
[Define the logical order of development:
- Which features need to be built first (foundation)
- Getting as quickly as possible to something usable/visible front end that works
- Properly pacing and scoping each feature so it is atomic but can also be built upon and improved as development approaches]

# Risks and Mitigations  
[Identify potential risks and how they'll be addressed:
- Technical challenges
- Figuring out the MVP that we can build upon
- Resource constraints]

# Appendix  
[Include any additional information:
- Research findings
- Technical specifications]
</PRD>
</file>

<file path="scripts/prd.txt">
Product Requirements Document: Generative Medieval Empire Map

1. Introduction

1.1. Overview: This document outlines the requirements for the "Generative Medieval Empire Map" feature within the Empire Builder World application. This feature will provide users with a dynamic, visually engaging representation of the top 10 empires based on API data, rendered as an interactive SVG map with a distinct medieval aesthetic.
1.2. Goals:
Visualize the ranking and basic stats of the top 10 empires geographically (albeit on a fictional, generated map).
Enhance user engagement by providing a thematic and interactive data visualization.
Create a unique visual element consistent with the "Empire Builder" theme.
1.3. Current Status: A work-in-progress (WIP) version may exist. This PRD guides the completion or modification of the feature to meet the specified requirements.
2. Scope

2.1. In Scope:
Fetching and displaying data for the Top 10 empires from the specified API endpoint.
Client-side generation of an SVG map featuring a single primary landmass.
Algorithmic division of the landmass into 10 distinct regions representing the empires.
Styling the map with a medieval aesthetic (colors, borders, potential textures).
Displaying empire statistics (token_name, token_symbol, total_distributed, total_burned) in a tooltip on region hover.
Basic responsiveness for the map container.
Displaying loading and error states.
Using the existing tech stack: Vite, Vue.js (specify Vue 2 or 3 if relevant, assume 3+), Zod, D3.js (v7+), DaisyUI (with Tailwind CSS).
2.2. Out of Scope:
Displaying more than 10 empires.
Historical data visualization or time-based map changes.
User customization of the map appearance or data displayed.
Complex map interactions beyond hover (e.g., clicking, zooming, panning - unless specified later).
Server-side rendering of the map.
Advanced mobile-specific optimizations (focus on desktop/tablet first).
3. Target Audience

Users of the Empire Builder World platform interested in understanding the current hierarchy and status of the top-ranking empires/tokens.
4. User Stories

4.1. As a platform user, I want to view a visually thematic map displaying the top 10 empires so that I can quickly understand the current power landscape.
4.2. As a platform user, I want the map to have a medieval style (parchment, old borders, thematic colors) so that it feels integrated with the Empire Builder theme.
4.3. As a platform user, I want to hover my mouse over an empire's region on the map so that I can see its detailed stats (Name, Symbol, Distributed USD, Tokens Burned) in a tooltip.
4.4. As a platform user, I want to see clear loading and error indicators so that I understand the map's status if data is delayed or fails to load.
5. Functional Requirements

FR01: Data Fetching: The application MUST fetch data for the top 10 empires by calling GET https://www.empirebuilder.world/api/top-empires?limit=10&page=1.
FR02: Data Validation: Fetched data MUST be validated against a predefined Zod schema representing the expected structure of an empire object (base_token, token_name, token_symbol, total_distributed, total_burned, logo_uri). Invalid data should trigger an error state.
FR03: Map Generation Trigger: The SVG map generation process MUST be triggered automatically when the component mounts and after the empire data has been successfully fetched and validated.
FR04: Landmass Generation: A primary landmass shape MUST be algorithmically generated as an SVG path. The shape should feature an irregular "coastline" effect (e.g., using shape perturbation or SVG filters).
FR05: Region Generation: The generated landmass MUST be algorithmically divided into 10 distinct, non-overlapping regions. The method used should ensure regions are contained within the landmass boundaries (e.g., Voronoi diagram clipped to the landmass polygon). Each region MUST be represented by an SVG path.
FR06: Empire-Region Assignment: The fetched empires (ranked 1-10) MUST be assigned uniquely to the 10 generated regions based on their rank (e.g., Rank 1 assigned to Region 0, Rank 2 to Region 1, etc.).
FR07: Region Rendering: Each generated empire region MUST be rendered as an SVG <path> element with visible borders.
FR08: Hover Interaction:
FR08.a: Hovering the mouse cursor over a region path MUST visually highlight that region (e.g., change fill opacity, stroke color/width). The highlight MUST be removed when the cursor leaves the region.
FR08.b: Hovering over a region path MUST display a tooltip element.
FR09: Tooltip Content: The tooltip MUST display the following information for the hovered empire:
Empire Name (token_name)
Empire Symbol (token_symbol)
Total Distributed (total_distributed, formatted as USD currency, e.g., $1,234.56)
Total Burned (total_burned, formatted as a number, e.g., 255,296,106)
FR10: Loading State: A loading indicator (e.g., a DaisyUI spinner or custom message) MUST be displayed while the initial API data is being fetched.
FR11: Error State: A user-friendly error message (e.g., using a DaisyUI alert component) MUST be displayed if the API fetch fails, data validation fails, or a critical error occurs during map generation.
6. Design & UI/UX Requirements

DR01: Medieval Aesthetic: The map MUST adhere to a medieval visual theme.
Color Palette: Utilize muted greens, blues, browns, ochres. Define specific hex/rgba values.
Textures (Optional): Attempt to simulate parchment or water texture using SVG filters or subtle CSS background effects, performance permitting.
Borders: Region borders should be clearly visible, potentially styled with a dark, slightly irregular look.
DR02: DaisyUI Integration: Utilize DaisyUI components for UI elements like tooltips, loading indicators, and error messages. These components MUST be styled or themed to align with the overall medieval aesthetic as much as possible.
DR03: Tooltip Appearance: Tooltips MUST be clearly legible, positioned near the hovered region/cursor without obscuring essential map details. Consider using a thematic web font if available and performant.
DR04: Layout: The map component should be well-integrated into the surrounding page layout, likely centered or occupying a defined content area.
DR05: Visual States: Loading and Error states should be visually distinct and informative.
7. Technical Requirements

TR01: Framework: Implement the feature as a reusable Vue.js (specify version, e.g., v3) component, utilizing the Composition API.
TR02: D3.js Usage: Use D3.js (v7+) for:
SVG element creation and manipulation.
Data binding (.data().join()).
Geometric calculations (e.g., d3.Delaunay, d3.voronoi).
Path generation (d3.line, path commands).
Scales (e.g., d3.scaleOrdinal for color, d3.scaleLog for opacity based on data).
Event handling for interactions.
TR03: Polygon Clipping: Implement or utilize a library for robust polygon clipping (required for FR05, e.g., clipping Voronoi cells to the landmass shape). Evaluate options like polygon-clipping NPM package or a manual implementation if simpler cases suffice.
TR04: Zod Schema: Define a Zod schema (src/schemas/empireSchema.js) for the empire object structure and use it to parse/validate the API response within the data fetching logic.
TR05: SVG Generation: All SVG elements comprising the map (landmass, regions, borders) MUST be generated client-side via D3 within the Vue component.
TR06: SVG Filters: If used for textures/effects, SVG filters (<defs>) should be defined and applied efficiently. Monitor their performance impact.
TR07: State Management: Manage component state (loading, error, empire data, map data) effectively within the Vue component.
8. Non-Functional Requirements

NFR01: Performance:
Initial map generation (post-data fetch) should be visually complete within 1.5 seconds on target devices.
Hover interactions (highlight + tooltip display) should feel instantaneous (< 100ms latency).
CPU usage during interaction should remain low. Monitor the performance cost of generative algorithms and SVG filters.
NFR02: Responsiveness: The SVG map MUST scale proportionally to fit its container using viewBox and preserveAspectRatio. Tooltips MUST remain visible and correctly positioned during typical window resizing. Define behavior for very small screens if necessary (e.g., simplify map, show list view instead).
NFR03: Error Handling: Implement try-catch blocks for data fetching, validation, and potentially complex D3 generation steps. Display informative error messages (FR11) without breaking the entire application. Log detailed errors to the console.
NFR04: Code Quality: Code MUST be well-structured, modular (Vue components, separate utility functions), and commented, especially for complex algorithms (generation, clipping) and D3 logic. Adhere to project linting rules.
NFR05: Accessibility: While complex SVG map accessibility is challenging, ensure:
Tooltips are implemented accessibly (e.g., potentially using ARIA attributes if feasible with DaisyUI tooltip component).
Loading/Error states use appropriate ARIA roles if possible.
Sufficient color contrast for text and essential borders.
9. Open Questions

What is the required level of detail/realism for the "coastline" generation?
What specific polygon clipping library/method should be used?
How should the DaisyUI theme be customized to achieve the desired medieval look? (Requires investigation into DaisyUI theming capabilities).
What is the fallback behavior on extremely small mobile screens?
Are there specific performance budgets for CPU/memory?
Specific browser support requirements beyond modern evergreen browsers?
10. Release Criteria

All Functional Requirements (FR) implemented and verified.
All Non-Functional Requirements (NFR) met within acceptable tolerances.
Design and UI/UX requirements (DR) implemented.
Code reviewed and approved.
No critical or major bugs outstanding.
Feature tested on target browsers/devices.
</file>

<file path="src/schemas/empireSchema.ts">
import { z } from 'zod';

/**
 * Schema for individual empire data
 * Validates the structure of empire objects received from the API
 */
export const EmpireSchema = z.object({
  base_token: z.string()
    .min(1, "Base token identifier is required")
    .describe('Unique identifier for the empire token'),
  
  token_name: z.string()
    .min(1, "Token name is required")
    .describe('Full name of the empire token'),
  
  token_symbol: z.string()
    .min(1, "Token symbol is required")
    .describe('Symbol/ticker of the empire token'),
  
  total_distributed: z.number()
    .nonnegative("Total distributed value must be non-negative")
    .describe('Total distributed value in USD'),
  
  total_burned: z.number()
    .nonnegative("Total burned tokens must be non-negative")
    .describe('Total number of tokens burned'),
  
  logo_uri: z.string()
    .url("Logo URI must be a valid URL")
    .optional()
    .describe('URI to the empire logo image'),
});

/**
 * Schema for API response containing multiple empires
 * Validates the overall structure of the API response
 */
export const EmpiresResponseSchema = z.object({
  empires: z.array(EmpireSchema)
    .min(1, "At least one empire must be present in the response")
    .describe('Array of empire objects'),
  
  totalCount: z.number()
    .int("Total count must be an integer")
    .nonnegative("Total count must be non-negative")
    .describe('Total count of empires'),
  
  queryTime: z.number()
    .describe('Query execution time'),
  
  page: z.number()
    .int("Page number must be an integer")
    .positive("Page number must be positive")
    .describe('Current page number'),
  
  itemsPerPage: z.number()
    .int("Items per page must be an integer")
    .positive("Items per page must be positive")
    .describe('Number of items per page'),
});

/**
 * Detailed error formatter for Zod validation errors
 * Transforms Zod errors into a more readable format for debugging and user feedback
 */
export const formatZodError = (error: z.ZodError): string => {
  return error.errors.map(err => {
    const path = err.path.join('.');
    return `${path ? `${path}: ` : ''}${err.message}`;
  }).join('; ');
};

/**
 * Type definitions derived from Zod schemas
 */
export type Empire = z.infer<typeof EmpireSchema>;
export type EmpiresResponse = z.infer<typeof EmpiresResponseSchema>;

/**
 * Territory interface for map visualization
 * Represents a region on the map associated with an empire
 */
export interface Territory {
  id: number;
  name: string;
  path: string;
  color: string;
  neighbors: number[];
  empire?: Empire;
}

/**
 * Medieval theme color palette for map visualization
 * These colors are designed to complement the medieval aesthetic
 */
export const medievalColors = [
  '#8C5523', // Brown
  '#2E4052', // Navy
  '#607744', // Olive
  '#BC4749', // Rust
  '#D5A021', // Gold
  '#5B3758', // Purple
  '#1D7874', // Teal
  '#8E5572', // Mauve
  '#3F4045', // Charcoal
  '#9B2915', // Brick
];
</file>

<file path=".env.example">
# API Keys (Required to enable respective provider)
ANTHROPIC_API_KEY=your_anthropic_api_key_here       # Required: Format: sk-ant-api03-...
PERPLEXITY_API_KEY=your_perplexity_api_key_here     # Optional: Format: pplx-...
OPENAI_API_KEY=your_openai_api_key_here             # Optional, for OpenAI/OpenRouter models. Format: sk-proj-...
GOOGLE_API_KEY=your_google_api_key_here             # Optional, for Google Gemini models.
MISTRAL_API_KEY=your_mistral_key_here               # Optional, for Mistral AI models.
XAI_API_KEY=YOUR_XAI_KEY_HERE                       # Optional, for xAI AI models.
AZURE_OPENAI_API_KEY=your_azure_key_here            # Optional, for Azure OpenAI models (requires endpoint in .taskmasterconfig).
</file>

<file path=".roomodes">
{
  "customModes": [
    {
      "slug": "boomerang",
      "name": "Boomerang",
      "roleDefinition": "You are Roo, a strategic workflow orchestrator who coordinates complex tasks by delegating them to appropriate specialized modes. You have a comprehensive understanding of each mode's capabilities and limitations, also your own, and with the information given by the user and other modes in shared context you are enabled to effectively break down complex problems into discrete tasks that can be solved by different specialists using the `taskmaster-ai` system for task and context management.",
      "customInstructions": "Your role is to coordinate complex workflows by delegating tasks to specialized modes, using `taskmaster-ai` as the central hub for task definition, progress tracking, and context management. \nAs an orchestrator, you should:\nn1. When given a complex task, use contextual information (which gets updated frequently) to break it down into logical subtasks that can be delegated to appropriate specialized modes.\nn2. For each subtask, use the `new_task` tool to delegate. Choose the most appropriate mode for the subtask's specific goal and provide comprehensive instructions in the `message` parameter. \nThese instructions must include:\n*   All necessary context from the parent task or previous subtasks required to complete the work.\n*   A clearly defined scope, specifying exactly what the subtask should accomplish.\n*   An explicit statement that the subtask should *only* perform the work outlined in these instructions and not deviate.\n*   An instruction for the subtask to signal completion by using the `attempt_completion` tool, providing a thorough summary of the outcome in the `result` parameter, keeping in mind that this summary will be the source of truth used to further relay this information to other tasks and for you to keep track of what was completed on this project.\nn3. Track and manage the progress of all subtasks. When a subtask is completed, acknowledge its results and determine the next steps.\nn4. Help the user understand how the different subtasks fit together in the overall workflow. Provide clear reasoning about why you're delegating specific tasks to specific modes.\nn5. Ask clarifying questions when necessary to better understand how to break down complex tasks effectively. If it seems complex delegate to architect to accomplish that \nn6. Use subtasks to maintain clarity. If a request significantly shifts focus or requires a different expertise (mode), consider creating a subtask rather than overloading the current one.",
      "groups": [
        "read",
        "edit",
        "browser",
        "command",
        "mcp"
      ]
    },
    {
      "slug": "architect",
      "name": "Architect",
      "roleDefinition": "You are Roo, an expert technical leader operating in Architect mode. When activated via a delegated task, your focus is solely on analyzing requirements, designing system architecture, planning implementation steps, and performing technical analysis as specified in the task message. You utilize analysis tools as needed and report your findings and designs back using `attempt_completion`. You do not deviate from the delegated task scope.",
      "customInstructions": "1. Do some information gathering (for example using read_file or search_files) to get more context about the task.\n\n2. You should also ask the user clarifying questions to get a better understanding of the task.\n\n3. Once you've gained more context about the user's request, you should create a detailed plan for how to accomplish the task. Include Mermaid diagrams if they help make your plan clearer.\n\n4. Ask the user if they are pleased with this plan, or if they would like to make any changes. Think of this as a brainstorming session where you can discuss the task and plan the best way to accomplish it.\n\n5. Once the user confirms the plan, ask them if they'd like you to write it to a markdown file.\n\n6. Use the switch_mode tool to request that the user switch to another mode to implement the solution.",
      "groups": [
        "read",
        ["edit", { "fileRegex": "\\.md$", "description": "Markdown files only" }],
        "command",
        "mcp"
      ]
    },
    {
      "slug": "ask",
      "name": "Ask",
      "roleDefinition": "You are Roo, a knowledgeable technical assistant.\nWhen activated by another mode via a delegated task, your focus is to research, analyze, and provide clear, concise answers or explanations based *only* on the specific information requested in the delegation message. Use available tools for information gathering and report your findings back using `attempt_completion`.",
      "customInstructions": "You can analyze code, explain concepts, and access external resources. Make sure to answer the user's questions and don't rush to switch to implementing code. Include Mermaid diagrams if they help make your response clearer.",
      "groups": [
        "read",
        "browser",
        "mcp"
      ]
    },
    {
      "slug": "debug",
      "name": "Debug",
      "roleDefinition": "You are Roo, an expert software debugger specializing in systematic problem diagnosis and resolution. When activated by another mdode, your task is to meticulously analyze the provided debugging request (potentially referencing Taskmaster tasks, logs, or metrics), use diagnostic tools as instructed to investigate the issue, identify the root cause, and report your findings and recommended next steps back via `attempt_completion`. You focus solely on diagnostics within the scope defined by the delegated task.",
      "customInstructions": "Reflect on 5-7 different possible sources of the problem, distill those down to 1-2 most likely sources, and then add logs to validate your assumptions. Explicitly ask the user to confirm the diagnosis before fixing the problem.",
      "groups": [
        "read",
        "edit",
        "command",
        "mcp"
      ]
    },
    {
      "slug": "test",
      "name": "Test",
      "roleDefinition": "You are Roo, an expert software tester. Your primary focus is executing testing tasks delegated to you by other modes.\nAnalyze the provided scope and context (often referencing a Taskmaster task ID and its `testStrategy`), develop test plans if needed, execute tests diligently, and report comprehensive results (pass/fail, bugs, coverage) back using `attempt_completion`. You operate strictly within the delegated task's boundaries.",
      "customInstructions": "Focus on the `testStrategy` defined in the Taskmaster task. Develop and execute test plans accordingly. Report results clearly, including pass/fail status, bug details, and coverage information.",
      "groups": [
        "read",
        "command",
        "mcp"
      ]
    }
  ]
}
</file>

<file path=".taskmasterconfig">
{
  "models": {
    "main": {
      "provider": "openrouter",
      "modelId": "google/gemini-2.5-pro-preview-03-25",
      "maxTokens": 120000,
      "temperature": 0.2
    },
    "research": {
      "provider": "openrouter",
      "modelId": "qwen/qwen-2.5-coder-32b-instruct",
      "maxTokens": 8700,
      "temperature": 0.1
    },
    "fallback": {
      "provider": "anthropic",
      "modelId": "claude-3.5-sonnet-20240620",
      "maxTokens": 120000,
      "temperature": 0.1
    }
  },
  "global": {
    "logLevel": "info",
    "debug": false,
    "defaultSubtasks": 5,
    "defaultPriority": "medium",
    "projectName": "Taskmaster",
    "ollamaBaseUrl": "http://localhost:11434/api",
    "azureOpenaiBaseUrl": "https://your-endpoint.openai.azure.com/"
  }
}
</file>

<file path="public/favicon.svg">
<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" viewBox="0 0 64 64" fill="none">
  <!-- Background -->
  <rect width="64" height="64" rx="12" fill="#1E293B"/>
  
  <!-- Grid Pattern -->
  <path d="M8 8 L56 8 L56 56 L8 56 Z" stroke="#334155" stroke-width="0.5" fill="none"/>
  <path d="M16 8 L16 56" stroke="#334155" stroke-width="0.5"/>
  <path d="M24 8 L24 56" stroke="#334155" stroke-width="0.5"/>
  <path d="M32 8 L32 56" stroke="#334155" stroke-width="0.5"/>
  <path d="M40 8 L40 56" stroke="#334155" stroke-width="0.5"/>
  <path d="M48 8 L48 56" stroke="#334155" stroke-width="0.5"/>
  <path d="M8 16 L56 16" stroke="#334155" stroke-width="0.5"/>
  <path d="M8 24 L56 24" stroke="#334155" stroke-width="0.5"/>
  <path d="M8 32 L56 32" stroke="#334155" stroke-width="0.5"/>
  <path d="M8 40 L56 40" stroke="#334155" stroke-width="0.5"/>
  <path d="M8 48 L56 48" stroke="#334155" stroke-width="0.5"/>
  
  <!-- Central Territory (Hexagon) -->
  <path d="M32 20 L40 24 L40 32 L32 36 L24 32 L24 24 Z" fill="#3B82F6" stroke="#fff" stroke-width="1"/>
  
  <!-- Surrounding Territories -->
  <path d="M44 28 L50 31 L50 37 L44 40 L38 37 L38 31 Z" fill="#F97316" stroke="#fff" stroke-width="1"/>
  <path d="M20 28 L26 31 L26 37 L20 40 L14 37 L14 31 Z" fill="#10B981" stroke="#fff" stroke-width="1"/>
  <path d="M32 42 L38 45 L38 51 L32 54 L26 51 L26 45 Z" fill="#8B5CF6" stroke="#fff" stroke-width="1"/>
  
  <!-- Dollar Symbol -->
  <path d="M32 25 L32 31 M30 26 L34 26 M30 30 L34 30" stroke="white" stroke-width="1.5" stroke-linecap="round"/>
</svg>
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="src/assets/vue.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="37.07" height="36" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 198"><path fill="#41B883" d="M204.8 0H256L128 220.8L0 0h97.92L128 51.2L157.44 0h47.36Z"></path><path fill="#41B883" d="m0 0l128 220.8L256 0h-51.2L128 132.48L50.56 0H0Z"></path><path fill="#35495E" d="M50.56 0L128 133.12L204.8 0h-47.36L128 51.2L97.92 0H50.56Z"></path></svg>
</file>

<file path="src/components/HelloWorld.vue">
<script setup lang="ts">
import { ref } from 'vue'

defineProps<{ msg: string }>()

const count = ref(0)
</script>

<template>
  <h1>{{ msg }}</h1>

  <div class="card">
    <button type="button" @click="count++">count is {{ count }}</button>
    <p>
      Edit
      <code>components/HelloWorld.vue</code> to test HMR
    </p>
  </div>

  <p>
    Check out
    <a href="https://vuejs.org/guide/quick-start.html#local" target="_blank"
      >create-vue</a
    >, the official Vue + Vite starter
  </p>
  <p>
    Learn more about IDE Support for Vue in the
    <a
      href="https://vuejs.org/guide/scaling-up/tooling.html#ide-support"
      target="_blank"
      >Vue Docs Scaling up Guide</a
    >.
  </p>
  <p class="read-the-docs">Click on the Vite and Vue logos to learn more</p>
</template>

<style scoped>
.read-the-docs {
  color: #888;
}
</style>
</file>

<file path="src/App.vue">
<script setup lang="ts">
import EmpireMap from './components/EmpireMap.vue'
</script>

<template>
  <div class="min-h-screen bg-base-100 text-base-content flex flex-col items-center">
    <header class="w-full p-4 bg-base-200 flex justify-between items-center">
      <h1 class="text-3xl font-bold">Empire Maps</h1>
      
      <!-- Dark mode toggle -->
      <label class="swap swap-rotate">
        <input type="checkbox" @change="toggleTheme" :checked="isDarkMode" />
        <div class="swap-on">🌙</div>
        <div class="swap-off">🔆</div>
      </label>
    </header>
    
    <main class="container mx-auto p-4 flex-grow">
      <EmpireMap />
    </main>
    
    <footer class="p-4 bg-base-300 text-center text-sm w-full">
      <p class="opacity-80">
        Made with love by 
        <a href="https://warpcast.com/metaend.eth" target="_blank" rel="noopener noreferrer" 
           class="font-medium hover:underline hover:text-primary transition-colors">
          metaend
        </a> 
        and 
        <a href="https://mtdv.orbiter.website" target="_blank" rel="noopener noreferrer"
           class="font-medium hover:underline hover:text-primary transition-colors">
          $MTDV Empire
        </a>
      </p>
    </footer>
  </div>
</template>

<script lang="ts">
export default {
  data() {
    return {
      isDarkMode: window.matchMedia('(prefers-color-scheme: dark)').matches
    }
  },
  mounted() {
    // Initialize theme based on user preference or system setting
    this.applyTheme();
    
    // Listen for system theme changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      this.isDarkMode = e.matches;
      this.applyTheme();
    });
  },
  methods: {
    toggleTheme() {
      this.isDarkMode = !this.isDarkMode;
      this.applyTheme();
    },
    applyTheme() {
      document.documentElement.setAttribute('data-theme', this.isDarkMode ? 'dark' : 'light');
      localStorage.setItem('theme', this.isDarkMode ? 'dark' : 'light');
    }
  }
}
</script>

<style>
/* Global styles */
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;
}

/* For mobile optimization */
@media (max-width: 768px) {
  html {
    font-size: 14px;
  }
}
</style>
</file>

<file path="src/main.ts">
import { createApp } from 'vue'
import './style.css'
import App from './App.vue'

// Load theme from local storage or use system preference
const theme = localStorage.getItem('theme') || 
              (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
document.documentElement.setAttribute('data-theme', theme);

createApp(App).mount('#app')
</file>

<file path="src/style.css">
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom base styles */
:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;
  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Mobile optimization */
@media (max-width: 768px) {
  html {
    font-size: 14px;
  }
}
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

# Added by Claude Task Master
dev-debug.log
# Dependency directories
node_modules/
# Environment variables
.env
.vscode
# OS specific
# Task files
tasks.json
tasks/
</file>

<file path=".windsurfrules">
1. use bun
2. use vite
3. use zod
4. use daisyui
5. mobile optimize
6. static site
7. dark mode
8 use tailwindcss 3

# Added by Task Master - Development Workflow Rules

Below you will find a variety of important rules spanning:
- the dev_workflow
- the .windsurfrules document self-improvement workflow
- the template to follow when modifying or adding new sections/rules to this document.

---
DEV_WORKFLOW
---
description: Guide for using meta-development script (scripts/dev.js) to manage task-driven development workflows
globs: **/*
filesToApplyRule: **/*
alwaysApply: true
---

- **Global CLI Commands**
  - Task Master now provides a global CLI through the `task-master` command
  - All functionality from `scripts/dev.js` is available through this interface
  - Install globally with `npm install -g claude-task-master` or use locally via `npx`
  - Use `task-master <command>` instead of `node scripts/dev.js <command>`
  - Examples:
    - `task-master list` instead of `node scripts/dev.js list`
    - `task-master next` instead of `node scripts/dev.js next`
    - `task-master expand --id=3` instead of `node scripts/dev.js expand --id=3`
  - All commands accept the same options as their script equivalents
  - The CLI provides additional commands like `task-master init` for project setup

- **Development Workflow Process**
  - Start new projects by running `task-master init` or `node scripts/dev.js parse-prd --input=<prd-file.txt>` to generate initial tasks.json
  - Begin coding sessions with `task-master list` to see current tasks, status, and IDs
  - Analyze task complexity with `task-master analyze-complexity --research` before breaking down tasks
  - Select tasks based on dependencies (all marked 'done'), priority level, and ID order
  - Clarify tasks by checking task files in tasks/ directory or asking for user input
  - View specific task details using `task-master show <id>` to understand implementation requirements
  - Break down complex tasks using `task-master expand --id=<id>` with appropriate flags
  - Clear existing subtasks if needed using `task-master clear-subtasks --id=<id>` before regenerating
  - Implement code following task details, dependencies, and project standards
  - Verify tasks according to test strategies before marking as complete
  - Mark completed tasks with `task-master set-status --id=<id> --status=done`
  - Update dependent tasks when implementation differs from original plan
  - Generate task files with `task-master generate` after updating tasks.json
  - Maintain valid dependency structure with `task-master fix-dependencies` when needed
  - Respect dependency chains and task priorities when selecting work
  - Report progress regularly using the list command

- **Task Complexity Analysis**
  - Run `node scripts/dev.js analyze-complexity --research` for comprehensive analysis
  - Review complexity report in scripts/task-complexity-report.json
  - Or use `node scripts/dev.js complexity-report` for a formatted, readable version of the report
  - Focus on tasks with highest complexity scores (8-10) for detailed breakdown
  - Use analysis results to determine appropriate subtask allocation
  - Note that reports are automatically used by the expand command

- **Task Breakdown Process**
  - For tasks with complexity analysis, use `node scripts/dev.js expand --id=<id>`
  - Otherwise use `node scripts/dev.js expand --id=<id> --subtasks=<number>`
  - Add `--research` flag to leverage Perplexity AI for research-backed expansion
  - Use `--prompt="<context>"` to provide additional context when needed
  - Review and adjust generated subtasks as necessary
  - Use `--all` flag to expand multiple pending tasks at once
  - If subtasks need regeneration, clear them first with `clear-subtasks` command

- **Implementation Drift Handling**
  - When implementation differs significantly from planned approach
  - When future tasks need modification due to current implementation choices
  - When new dependencies or requirements emerge
  - Call `node scripts/dev.js update --from=<futureTaskId> --prompt="<explanation>"` to update tasks.json

- **Task Status Management**
  - Use 'pending' for tasks ready to be worked on
  - Use 'done' for completed and verified tasks
  - Use 'deferred' for postponed tasks
  - Add custom status values as needed for project-specific workflows

- **Task File Format Reference**
  ```
  # Task ID: <id>
  # Title: <title>
  # Status: <status>
  # Dependencies: <comma-separated list of dependency IDs>
  # Priority: <priority>
  # Description: <brief description>
  # Details:
  <detailed implementation notes>
  
  # Test Strategy:
  <verification approach>
  ```

- **Command Reference: parse-prd**
  - Legacy Syntax: `node scripts/dev.js parse-prd --input=<prd-file.txt>`
  - CLI Syntax: `task-master parse-prd --input=<prd-file.txt>`
  - Description: Parses a PRD document and generates a tasks.json file with structured tasks
  - Parameters: 
    - `--input=<file>`: Path to the PRD text file (default: sample-prd.txt)
  - Example: `task-master parse-prd --input=requirements.txt`
  - Notes: Will overwrite existing tasks.json file. Use with caution.

- **Command Reference: update**
  - Legacy Syntax: `node scripts/dev.js update --from=<id> --prompt="<prompt>"`
  - CLI Syntax: `task-master update --from=<id> --prompt="<prompt>"`
  - Description: Updates tasks with ID >= specified ID based on the provided prompt
  - Parameters:
    - `--from=<id>`: Task ID from which to start updating (required)
    - `--prompt="<text>"`: Explanation of changes or new context (required)
  - Example: `task-master update --from=4 --prompt="Now we are using Express instead of Fastify."`
  - Notes: Only updates tasks not marked as 'done'. Completed tasks remain unchanged.

- **Command Reference: generate**
  - Legacy Syntax: `node scripts/dev.js generate`
  - CLI Syntax: `task-master generate`
  - Description: Generates individual task files in tasks/ directory based on tasks.json
  - Parameters: 
    - `--file=<path>, -f`: Use alternative tasks.json file (default: 'tasks/tasks.json')
    - `--output=<dir>, -o`: Output directory (default: 'tasks')
  - Example: `task-master generate`
  - Notes: Overwrites existing task files. Creates tasks/ directory if needed.

- **Command Reference: set-status**
  - Legacy Syntax: `node scripts/dev.js set-status --id=<id> --status=<status>`
  - CLI Syntax: `task-master set-status --id=<id> --status=<status>`
  - Description: Updates the status of a specific task in tasks.json
  - Parameters:
    - `--id=<id>`: ID of the task to update (required)
    - `--status=<status>`: New status value (required)
  - Example: `task-master set-status --id=3 --status=done`
  - Notes: Common values are 'done', 'pending', and 'deferred', but any string is accepted.

- **Command Reference: list**
  - Legacy Syntax: `node scripts/dev.js list`
  - CLI Syntax: `task-master list`
  - Description: Lists all tasks in tasks.json with IDs, titles, and status
  - Parameters: 
    - `--status=<status>, -s`: Filter by status
    - `--with-subtasks`: Show subtasks for each task
    - `--file=<path>, -f`: Use alternative tasks.json file (default: 'tasks/tasks.json')
  - Example: `task-master list`
  - Notes: Provides quick overview of project progress. Use at start of sessions.

- **Command Reference: expand**
  - Legacy Syntax: `node scripts/dev.js expand --id=<id> [--num=<number>] [--research] [--prompt="<context>"]`
  - CLI Syntax: `task-master expand --id=<id> [--num=<number>] [--research] [--prompt="<context>"]`
  - Description: Expands a task with subtasks for detailed implementation
  - Parameters:
    - `--id=<id>`: ID of task to expand (required unless using --all)
    - `--all`: Expand all pending tasks, prioritized by complexity
    - `--num=<number>`: Number of subtasks to generate (default: from complexity report)
    - `--research`: Use Perplexity AI for research-backed generation
    - `--prompt="<text>"`: Additional context for subtask generation
    - `--force`: Regenerate subtasks even for tasks that already have them
  - Example: `task-master expand --id=3 --num=5 --research --prompt="Focus on security aspects"`
  - Notes: Uses complexity report recommendations if available.

- **Command Reference: analyze-complexity**
  - Legacy Syntax: `node scripts/dev.js analyze-complexity [options]`
  - CLI Syntax: `task-master analyze-complexity [options]`
  - Description: Analyzes task complexity and generates expansion recommendations
  - Parameters:
    - `--output=<file>, -o`: Output file path (default: scripts/task-complexity-report.json)
    - `--model=<model>, -m`: Override LLM model to use
    - `--threshold=<number>, -t`: Minimum score for expansion recommendation (default: 5)
    - `--file=<path>, -f`: Use alternative tasks.json file
    - `--research, -r`: Use Perplexity AI for research-backed analysis
  - Example: `task-master analyze-complexity --research`
  - Notes: Report includes complexity scores, recommended subtasks, and tailored prompts.

- **Command Reference: clear-subtasks**
  - Legacy Syntax: `node scripts/dev.js clear-subtasks --id=<id>`
  - CLI Syntax: `task-master clear-subtasks --id=<id>`
  - Description: Removes subtasks from specified tasks to allow regeneration
  - Parameters:
    - `--id=<id>`: ID or comma-separated IDs of tasks to clear subtasks from
    - `--all`: Clear subtasks from all tasks
  - Examples:
    - `task-master clear-subtasks --id=3`
    - `task-master clear-subtasks --id=1,2,3`
    - `task-master clear-subtasks --all`
  - Notes: 
    - Task files are automatically regenerated after clearing subtasks
    - Can be combined with expand command to immediately generate new subtasks
    - Works with both parent tasks and individual subtasks

- **Task Structure Fields**
  - **id**: Unique identifier for the task (Example: `1`)
  - **title**: Brief, descriptive title (Example: `"Initialize Repo"`)
  - **description**: Concise summary of what the task involves (Example: `"Create a new repository, set up initial structure."`)
  - **status**: Current state of the task (Example: `"pending"`, `"done"`, `"deferred"`)
  - **dependencies**: IDs of prerequisite tasks (Example: `[1, 2]`)
    - Dependencies are displayed with status indicators (✅ for completed, ⏱️ for pending)
    - This helps quickly identify which prerequisite tasks are blocking work
  - **priority**: Importance level (Example: `"high"`, `"medium"`, `"low"`)
  - **details**: In-depth implementation instructions (Example: `"Use GitHub client ID/secret, handle callback, set session token."`)
  - **testStrategy**: Verification approach (Example: `"Deploy and call endpoint to confirm 'Hello World' response."`)
  - **subtasks**: List of smaller, more specific tasks (Example: `[{"id": 1, "title": "Configure OAuth", ...}]`)

- **Environment Variables Configuration**
  - **ANTHROPIC_API_KEY** (Required): Your Anthropic API key for Claude (Example: `ANTHROPIC_API_KEY=sk-ant-api03-...`)
  - **MODEL** (Default: `"claude-3-7-sonnet-20250219"`): Claude model to use (Example: `MODEL=claude-3-opus-20240229`)
  - **MAX_TOKENS** (Default: `"4000"`): Maximum tokens for responses (Example: `MAX_TOKENS=8000`)
  - **TEMPERATURE** (Default: `"0.7"`): Temperature for model responses (Example: `TEMPERATURE=0.5`)
  - **DEBUG** (Default: `"false"`): Enable debug logging (Example: `DEBUG=true`)
  - **LOG_LEVEL** (Default: `"info"`): Console output level (Example: `LOG_LEVEL=debug`)
  - **DEFAULT_SUBTASKS** (Default: `"3"`): Default subtask count (Example: `DEFAULT_SUBTASKS=5`)
  - **DEFAULT_PRIORITY** (Default: `"medium"`): Default priority (Example: `DEFAULT_PRIORITY=high`)
  - **PROJECT_NAME** (Default: `"MCP SaaS MVP"`): Project name in metadata (Example: `PROJECT_NAME=My Awesome Project`)
  - **PROJECT_VERSION** (Default: `"1.0.0"`): Version in metadata (Example: `PROJECT_VERSION=2.1.0`)
  - **PERPLEXITY_API_KEY**: For research-backed features (Example: `PERPLEXITY_API_KEY=pplx-...`)
  - **PERPLEXITY_MODEL** (Default: `"sonar-medium-online"`): Perplexity model (Example: `PERPLEXITY_MODEL=sonar-large-online`)

- **Determining the Next Task**
  - Run `task-master next` to show the next task to work on
  - The next command identifies tasks with all dependencies satisfied
  - Tasks are prioritized by priority level, dependency count, and ID
  - The command shows comprehensive task information including:
    - Basic task details and description
    - Implementation details
    - Subtasks (if they exist)
    - Contextual suggested actions
  - Recommended before starting any new development work
  - Respects your project's dependency structure
  - Ensures tasks are completed in the appropriate sequence
  - Provides ready-to-use commands for common task actions

- **Viewing Specific Task Details**
  - Run `task-master show <id>` or `task-master show --id=<id>` to view a specific task
  - Use dot notation for subtasks: `task-master show 1.2` (shows subtask 2 of task 1)
  - Displays comprehensive information similar to the next command, but for a specific task
  - For parent tasks, shows all subtasks and their current status
  - For subtasks, shows parent task information and relationship
  - Provides contextual suggested actions appropriate for the specific task
  - Useful for examining task details before implementation or checking status

- **Managing Task Dependencies**
  - Use `task-master add-dependency --id=<id> --depends-on=<id>` to add a dependency
  - Use `task-master remove-dependency --id=<id> --depends-on=<id>` to remove a dependency
  - The system prevents circular dependencies and duplicate dependency entries
  - Dependencies are checked for existence before being added or removed
  - Task files are automatically regenerated after dependency changes
  - Dependencies are visualized with status indicators in task listings and files

- **Command Reference: add-dependency**
  - Legacy Syntax: `node scripts/dev.js add-dependency --id=<id> --depends-on=<id>`
  - CLI Syntax: `task-master add-dependency --id=<id> --depends-on=<id>`
  - Description: Adds a dependency relationship between two tasks
  - Parameters:
    - `--id=<id>`: ID of task that will depend on another task (required)
    - `--depends-on=<id>`: ID of task that will become a dependency (required)
  - Example: `task-master add-dependency --id=22 --depends-on=21`
  - Notes: Prevents circular dependencies and duplicates; updates task files automatically

- **Command Reference: remove-dependency**
  - Legacy Syntax: `node scripts/dev.js remove-dependency --id=<id> --depends-on=<id>`
  - CLI Syntax: `task-master remove-dependency --id=<id> --depends-on=<id>`
  - Description: Removes a dependency relationship between two tasks
  - Parameters:
    - `--id=<id>`: ID of task to remove dependency from (required)
    - `--depends-on=<id>`: ID of task to remove as a dependency (required)
  - Example: `task-master remove-dependency --id=22 --depends-on=21`
  - Notes: Checks if dependency actually exists; updates task files automatically

- **Command Reference: validate-dependencies**
  - Legacy Syntax: `node scripts/dev.js validate-dependencies [options]`
  - CLI Syntax: `task-master validate-dependencies [options]`
  - Description: Checks for and identifies invalid dependencies in tasks.json and task files
  - Parameters:
    - `--file=<path>, -f`: Use alternative tasks.json file (default: 'tasks/tasks.json')
  - Example: `task-master validate-dependencies`
  - Notes: 
    - Reports all non-existent dependencies and self-dependencies without modifying files
    - Provides detailed statistics on task dependency state
    - Use before fix-dependencies to audit your task structure

- **Command Reference: fix-dependencies**
  - Legacy Syntax: `node scripts/dev.js fix-dependencies [options]`
  - CLI Syntax: `task-master fix-dependencies [options]`
  - Description: Finds and fixes all invalid dependencies in tasks.json and task files
  - Parameters:
    - `--file=<path>, -f`: Use alternative tasks.json file (default: 'tasks/tasks.json')
  - Example: `task-master fix-dependencies`
  - Notes: 
    - Removes references to non-existent tasks and subtasks
    - Eliminates self-dependencies (tasks depending on themselves)
    - Regenerates task files with corrected dependencies
    - Provides detailed report of all fixes made

- **Command Reference: complexity-report**
  - Legacy Syntax: `node scripts/dev.js complexity-report [options]`
  - CLI Syntax: `task-master complexity-report [options]`
  - Description: Displays the task complexity analysis report in a formatted, easy-to-read way
  - Parameters:
    - `--file=<path>, -f`: Path to the complexity report file (default: 'scripts/task-complexity-report.json')
  - Example: `task-master complexity-report`
  - Notes: 
    - Shows tasks organized by complexity score with recommended actions
    - Provides complexity distribution statistics
    - Displays ready-to-use expansion commands for complex tasks
    - If no report exists, offers to generate one interactively

- **Command Reference: add-task**
  - CLI Syntax: `task-master add-task [options]`
  - Description: Add a new task to tasks.json using AI
  - Parameters:
    - `--file=<path>, -f`: Path to the tasks file (default: 'tasks/tasks.json')
    - `--prompt=<text>, -p`: Description of the task to add (required)
    - `--dependencies=<ids>, -d`: Comma-separated list of task IDs this task depends on
    - `--priority=<priority>`: Task priority (high, medium, low) (default: 'medium')
  - Example: `task-master add-task --prompt="Create user authentication using Auth0"`
  - Notes: Uses AI to convert description into structured task with appropriate details

- **Command Reference: init**
  - CLI Syntax: `task-master init`
  - Description: Initialize a new project with Task Master structure
  - Parameters: None
  - Example: `task-master init`
  - Notes: 
    - Creates initial project structure with required files
    - Prompts for project settings if not provided
    - Merges with existing files when appropriate
    - Can be used to bootstrap a new Task Master project quickly

- **Code Analysis & Refactoring Techniques**
  - **Top-Level Function Search**
    - Use grep pattern matching to find all exported functions across the codebase
    - Command: `grep -E "export (function|const) \w+|function \w+\(|const \w+ = \(|module\.exports" --include="*.js" -r ./`
    - Benefits:
      - Quickly identify all public API functions without reading implementation details
      - Compare functions between files during refactoring (e.g., monolithic to modular structure)
      - Verify all expected functions exist in refactored modules
      - Identify duplicate functionality or naming conflicts
    - Usage examples:
      - When migrating from `scripts/dev.js` to modular structure: `grep -E "function \w+\(" scripts/dev.js`
      - Check function exports in a directory: `grep -E "export (function|const)" scripts/modules/`
      - Find potential naming conflicts: `grep -E "function (get|set|create|update)\w+\(" -r ./`
    - Variations:
      - Add `-n` flag to include line numbers
      - Add `--include="*.ts"` to filter by file extension
      - Use with `| sort` to alphabetize results
    - Integration with refactoring workflow:
      - Start by mapping all functions in the source file
      - Create target module files based on function grouping
      - Verify all functions were properly migrated
      - Check for any unintentional duplications or omissions

---
WINDSURF_RULES
---
description: Guidelines for creating and maintaining Windsurf rules to ensure consistency and effectiveness.
globs: .windsurfrules
filesToApplyRule: .windsurfrules
alwaysApply: true
---
The below describes how you should be structuring new rule sections in this document.
- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **Section References:**
  - Use `ALL_CAPS_SECTION` to reference files
  - Example: `WINDSURF_RULES`

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 

---
SELF_IMPROVE
---
description: Guidelines for continuously improving this rules document based on emerging code patterns and best practices.
globs: **/*
filesToApplyRule: **/*
alwaysApply: true
---

- **Rule Improvement Triggers:**
  - New code patterns not covered by existing rules
  - Repeated similar implementations across files
  - Common error patterns that could be prevented
  - New libraries or tools being used consistently
  - Emerging best practices in the codebase

- **Analysis Process:**
  - Compare new code with existing rules
  - Identify patterns that should be standardized
  - Look for references to external documentation
  - Check for consistent error handling patterns
  - Monitor test patterns and coverage

- **Rule Updates:**
  - **Add New Rules When:**
    - A new technology/pattern is used in 3+ files
    - Common bugs could be prevented by a rule
    - Code reviews repeatedly mention the same feedback
    - New security or performance patterns emerge

  - **Modify Existing Rules When:**
    - Better examples exist in the codebase
    - Additional edge cases are discovered
    - Related rules have been updated
    - Implementation details have changed

- **Example Pattern Recognition:**
  ```typescript
  // If you see repeated patterns like:
  const data = await prisma.user.findMany({
    select: { id: true, email: true },
    where: { status: 'ACTIVE' }
  });
  
  // Consider adding a PRISMA section in the .windsurfrules:
  // - Standard select fields
  // - Common where conditions
  // - Performance optimization patterns
  ```

- **Rule Quality Checks:**
  - Rules should be actionable and specific
  - Examples should come from actual code
  - References should be up to date
  - Patterns should be consistently enforced

- **Continuous Improvement:**
  - Monitor code review comments
  - Track common development questions
  - Update rules after major refactors
  - Add links to relevant documentation
  - Cross-reference related rules

- **Rule Deprecation:**
  - Mark outdated patterns as deprecated
  - Remove rules that no longer apply
  - Update references to deprecated rules
  - Document migration paths for old patterns

- **Documentation Updates:**
  - Keep examples synchronized with code
  - Update references to external docs
  - Maintain links between related rules
  - Document breaking changes

Follow WINDSURF_RULES for proper rule formatting and structure of windsurf rule sections.
</file>

<file path="index.html">
<!DOCTYPE html>
<html lang="en" data-theme="dark">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <meta name="description" content="Interactive visualization of top empires with territories scaled by economic power. Compare empires and their treasuries in a dynamic world map." />
    <meta name="theme-color" content="#1a202c" />
    <meta name="color-scheme" content="dark light" />
    <meta name="mobile-web-app-capable" content="yes" />
    
    <!-- Open Graph / Social Media -->
    <meta property="og:title" content="Empire Maps - Interactive Empire Visualization" />
    <meta property="og:description" content="Explore the top empires in an interactive world map where territory size reflects economic power." />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="/favicon.svg" />
    
    <!-- Mobile App Tags -->
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <link rel="apple-touch-icon" href="/favicon.svg" />
    
    <title>Empire Maps - Interactive Visualization</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>
</file>

<file path="postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="README.md">
# Empire Maps

![Medieval Map](https://img.shields.io/badge/Medieval-Empire%20Maps-brown?style=for-the-badge)
![License](https://img.shields.io/badge/license-MIT-green.svg)

## Overview

Empire Maps is a medieval-themed visualization component that displays empire territories on an interactive map. It uses Voronoi regions to represent different empire territories, with territory sizes scaled based on economic values. The component features authentic medieval styling with parchment textures, hand-drawn borders, and an antique appearance.

## Features

- **Medieval Map Visualization**: Authentic parchment-style maps with hand-drawn territory borders
- **Economic Territory Scaling**: Empire territory sizes proportional to their economic values
- **Top 10 Empires**: Automatically fetches and displays the top 10 empires by economic value
- **Interactive Elements**: Hover over territories to see detailed empire information 
- **Legend Display**: Empire legend displayed vertically alongside the map
- **Responsive Design**: Adapts to different screen sizes while maintaining medieval aesthetics
- **Dark Mode Support**: Automatically adapts to system dark/light mode preferences

## Technologies Used

- **Vue 3**: Framework for building the user interface
- **TypeScript**: Type-safe JavaScript
- **Vite**: Build tool for fast development
- **D3.js**: Data visualization library for map generation
- **d3-delaunay**: Library for generating Voronoi diagrams
- **Zod**: Runtime validation of API responses
- **Tailwind CSS**: Utility-first CSS framework
- **DaisyUI**: Component library for Tailwind CSS
- **Bun**: JavaScript runtime & package manager

## Getting Started

### Prerequisites

- Bun (for package management)
- Modern web browser

### Installation

1. Clone the repository:
   ```bash
   git clone https://github.com/yourusername/empiremaps.git
   cd empiremaps
   ```

2. Install dependencies:
   ```bash
   bun install
   ```

3. Start the development server:
   ```bash
   bun run dev
   ```

4. Open your browser and navigate to `http://localhost:5173`

## Usage

The `EmpireMap` component can be used in any Vue application:

```vue
<template>
  <EmpireMap />
</template>

<script setup>
import EmpireMap from './components/EmpireMap.vue';
</script>
```

## API Integration

The component fetches data from the Empire Builder API. It retrieves the top 10 empires based on economic value and visualizes them on the map. Each empire entry contains:

- Token name
- Token symbol
- Base token (contract address)
- Economic data (distributed value, burned value)

## Styling and Customization

The map features an authentic medieval styling with:

- Parchment-textured territories
- Hand-drawn borders
- Medieval compass rose
- Scroll-style labels
- Earthy color palette

## License

This project is licensed under the MIT License - see the LICENSE file for details.
</file>

<file path="renovate.json">
{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": [
    "config:recommended"
  ]
}
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{vue,js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [require("daisyui")],
  daisyui: {
    themes: ["light", "dark"],
    darkTheme: "dark",
  }
}
</file>

<file path="tsconfig.app.json">
{
  "extends": "@vue/tsconfig/tsconfig.dom.json",
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src/**/*.ts", "src/**/*.tsx", "src/**/*.vue"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'

// https://vite.dev/config/
export default defineConfig({
  plugins: [vue()],
  server: {
    proxy: {
      // Proxy API requests to avoid CORS issues in development
      '/api': {
        target: 'https://www.empirebuilder.world',
        changeOrigin: true,
        // Do not rewrite API path; forward /api/* directly to the target
        rewrite: (path) => path,
        configure: (proxy) => {
          // Add CORS headers to the proxy response
          proxy.on('proxyRes', (proxyRes) => {
            // Set CORS headers
            proxyRes.headers['Access-Control-Allow-Origin'] = '*';
            proxyRes.headers['Access-Control-Allow-Methods'] = 'GET, POST, OPTIONS';
            proxyRes.headers['Access-Control-Allow-Headers'] = 'Origin, X-Requested-With, Content-Type, Accept';
            proxyRes.headers['Access-Control-Max-Age'] = '86400'; // 24 hours
            
            // Add caching headers
            proxyRes.headers['Cache-Control'] = 'public, max-age=300'; // 5 minutes
          });
          
          // Log any errors
          proxy.on('error', (err) => {
            console.error('Proxy error:', err);
          });
        }
      }
    },
    cors: {
      origin: '*',
      methods: ['GET', 'POST', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization'],
      maxAge: 86400 // 24 hours in seconds
    }
  }
})
</file>

<file path="src/components/EmpireMap.vue">
<template>
  <div class="empire-map-container p-4">
    <!-- Loading Indicator -->
    <div v-if="loading" class="loading-overlay flex flex-col items-center justify-center p-6 rounded-lg">
      <div class="loading animate-spin w-12 h-12 border-4 border-primary border-t-transparent rounded-full mb-4"></div>
      <p class="text-base-content/70">Loading Empire Data...</p>
      <progress class="progress w-56 mt-2" max="100"></progress>
    </div>
    
    <!-- Error Message -->
    <div v-else-if="error" class="error-overlay bg-base-200 p-6 rounded-lg">
      <div class="alert alert-error mb-4">
        <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
        <span>{{ error }}</span>
      </div>
      <button @click="fetchEmpires" class="btn btn-secondary">Retry</button>
    </div>
    
    <!-- Map Container -->
    <div v-else class="relative flex flex-col md:flex-row gap-4">
      <!-- Main Map -->
      <div ref="mapContainer" class="w-full max-w-full aspect-[4/3] bg-base-200 shadow-inner overflow-hidden rounded-lg border-2 border-[#8B6B4C] relative">
        <svg ref="svgRef" :viewBox="viewBox" class="w-full h-full" preserveAspectRatio="xMidYMid meet"></svg>
      
        <!-- Hover information card - medieval parchment style -->
        <div 
          v-if="hoveredEmpire" 
          class="hover-info absolute top-4 left-4 w-64 p-3 rounded-md shadow-xl z-10"
          style="background-color: #f9f3e2; border: 2px solid #5d4037; font-family: serif;"
        >
          <div class="grid gap-1">
            <div class="text-lg font-semibold flex items-center" style="color: #5d4037;">
              <span class="truncate flex-1">{{ hoveredEmpire.token_name }}</span>
            </div>
            <div class="text-sm opacity-80" style="color: #5d4037;">
              Token: {{ formatShortAddress(hoveredEmpire.base_token) }}
            </div>
            <div class="grid grid-cols-2 text-xs gap-x-1" style="color: #5d4037;">
              <div class="font-medium">Treasury:</div>
              <div class="text-right">${{ formatNumber(hoveredEmpire.total_distributed) }}</div>
              
              <div class="font-medium">Burned:</div>
              <div class="text-right">{{ formatNumber(hoveredEmpire.total_burned) }}</div>
              
              <div class="font-medium">Symbol:</div>
              <div class="text-right">{{ hoveredEmpire.token_symbol }}</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Legend on the right side of the map -->
      <div v-if="mapGenerated && empires.length > 0" class="empire-legend md:w-48 lg:w-56 bg-[#f9f3e2] p-3 rounded-lg shadow-md border border-[#8B6B4C] self-start">
        <h3 class="text-base font-serif font-semibold mb-2 text-[#5D4037]">Empire Legend</h3>
        <div class="flex flex-col gap-2">
          <div 
            v-for="(empire, index) in empires" 
            :key="empire.token_name"
            class="flex items-center gap-1 p-1 rounded hover:bg-[#e9e3d2] cursor-pointer"
            @mouseenter="handleRegionHover(empire, index)"
            @mouseleave="handleTerritoryLeave"
          >
            <div 
              class="w-4 h-4 border-2 shadow-sm rounded-sm flex-shrink-0"
              style="background-color: #f9f3e2; border-color: #5d4037;" 
            ></div>
            <span class="text-xs font-serif truncate text-[#5D4037]">{{ empire.token_name }}</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import * as d3 from 'd3';
import { Delaunay } from 'd3-delaunay';
import { ref, onMounted, onBeforeUnmount } from 'vue';
import { z } from 'zod';
import type { Empire } from '../schemas/empireSchema';
import { formatZodError, EmpiresResponseSchema } from '../schemas/empireSchema';

// SVG and Map state
const empires = ref<Empire[]>([]);
const svgRef = ref<SVGElement | null>(null);
const mapContainer = ref<HTMLDivElement | null>(null);
const viewBox = ref('0 0 1000 750'); // Larger default size for better visibility
const loading = ref(true);
const error = ref<string | null>(null);
const hoveredEmpire = ref<Empire | null>(null);
const mapGenerated = ref(false);
const themeObserver = ref<MutationObserver | null>(null);

// Format numbers for better readability
const formatNumber = (num: number): string => {
  if (num >= 1000000) {
    return `${(num / 1000000).toFixed(2)}M`;
  }
  if (num >= 1000) {
    return `${(num / 1000).toFixed(2)}K`;
  }
  return num.toFixed(2);
};

// Format address for display
const formatShortAddress = (address: string): string => {
  if (!address || address.length < 10) return address;
  return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;
};

// Update the SVG viewBox based on container dimensions
const updateViewBox = () => {
  if (!mapContainer.value || !svgRef.value) return;
  
  // Fixed viewBox size for better visibility
  viewBox.value = '0 0 1000 750';
  
  // Also update the SVG size to fill container
  if (svgRef.value) {
    const containerWidth = mapContainer.value.clientWidth;
    const containerHeight = mapContainer.value.clientHeight;
    svgRef.value.setAttribute('width', `${containerWidth}px`);
    svgRef.value.setAttribute('height', `${containerHeight}px`);
  }
};

// Initialize the map
const initializeMap = () => {
  if (!svgRef.value || !mapContainer.value) return;
  
  // Fixed size for the map viewBox
  const width = 1000;
  const height = 750;
  
  // Select SVG element with d3
  const svg = d3.select(svgRef.value);
  
  // Clear existing content
  svg.selectAll('*').remove();
  
  try {
    // Ensure we have the patterns and filters
    ensureFiltersAndPatterns(svg);
    
    // Draw the landmass first
    const landmass = drawLandmass(svg, width, height);
    
    // Draw territories on the landmass
    if (landmass) {
      drawVoronoiRegions(svg, width, height);
    }
  } catch (err) {
    console.error('Error generating map visualization:', err);
    
    // Create a simpler fallback visualization
    createTemporaryVisualization(svg, width, height);
  }
};

// Define handlers for interacting with regions
const handleRegionHover = (empire: Empire, index: number) => {
  // Set the hovered empire
  hoveredEmpire.value = empire;
  
  // If we have SVG regions, highlight the current region
  if (svgRef.value) {
    const svg = d3.select(svgRef.value) as d3.Selection<SVGElement, unknown, null, undefined>;
    
    // Reset opacity for all regions first
    svg.selectAll('.region')
      .attr('fill-opacity', 0.7)
      .attr('stroke-width', 1);
    
    // Highlight the current region
    svg.select(`.region-${index}`)
      .attr('fill-opacity', 0.9)
      .attr('stroke-width', 2.5);
  }
};

const handleTerritoryLeave = () => {
  // Clear the hovered empire
  hoveredEmpire.value = null;
  
  // If we have SVG regions, reset all regions to default style
  if (svgRef.value) {
    const svg = d3.select(svgRef.value) as d3.Selection<SVGElement, unknown, null, undefined>;
    
    // Reset all regions to default style
    svg.selectAll('.region')
      .attr('fill-opacity', 0.7)
      .attr('stroke-width', 1);
  }
};

// Generate an irregular island-like landmass shape
const generateLandmass = (width: number, height: number): string => {
  const centerX = width / 2;
  const centerY = height / 2;
  const radius = Math.min(width, height) * 0.4;
  
  // Number of points to create the irregular polygon
  const numPoints = 24;
  
  // Generate points around a circle with random variance
  const points: [number, number][] = [];
  
  for (let i = 0; i < numPoints; i++) {
    const angle = (i / numPoints) * 2 * Math.PI;
    // Add randomness to radius to create irregular edges
    // More pronounced variance for that hand-drawn RPG map feel
    const variance = 0.8 + Math.random() * 0.4;
    const pointRadius = radius * variance;
    
    points.push([
      centerX + Math.cos(angle) * pointRadius,
      centerY + Math.sin(angle) * pointRadius
    ]);
  }
  
  // Close the path
  points.push(points[0]);
  
  // Create a line generator
  const lineGenerator = d3.line<[number, number]>()
    .x(d => d[0])
    .y(d => d[1])
    .curve(d3.curveBasisClosed); // Use basis curve for more natural, hand-drawn look
  
  // Generate the path data
  return lineGenerator(points) || '';
};

// Fetch empire data
const fetchEmpires = async () => {
  loading.value = true;
  error.value = null;

  try {
    // Define endpoint as per PRD requirements - limit=10 for top 10 empires
    const endpoint = 'https://www.empirebuilder.world/api/top-empires?limit=10&page=1';
    
    // Use CORS proxy for browser compatibility in static hosting
    const corsProxyURL = 'https://api.allorigins.win/raw?url=';
    const targetURL = encodeURIComponent(endpoint);
    const proxyURL = `${corsProxyURL}${targetURL}`;
    
    const response = await fetch(proxyURL);
    
    if (!response.ok) {
      console.error(`API request failed with status: ${response.status}`);
      throw new Error(`Failed to fetch data: ${response.statusText}`);
    }

    const data = await response.json();
    
    if (!data || !data.empires) {
      console.error('API returned invalid data structure:', data);
      throw new Error('Invalid API response format - missing empires data');
    }
    
    try {
      // Validate data against schema
      const parsedData = EmpiresResponseSchema.parse(data);
      empires.value = parsedData.empires; // Access the empires array from response
      
      console.log(`Loaded ${empires.value.length} empires data`);
      
      // If we have less than 10 empires, log a warning
      if (empires.value.length < 10) {
        console.warn(`Expected 10 empires but received only ${empires.value.length}`);
      }
      
      // Initialize map after a small delay to ensure DOM elements are ready
      setTimeout(() => {
        if (svgRef.value && mapContainer.value) {
          initializeMap();
        }
      }, 100);
    } catch (validationError) {
      // Handle validation errors
      if (validationError instanceof z.ZodError) {
        const formattedError = formatZodError(validationError);
        console.error('Validation error:', formattedError);
        throw new Error(`Data validation failed: ${formattedError}`);
      }
      // Re-throw other errors
      throw validationError;
    }
  } catch (err) {
    console.error('Error fetching or parsing empire data:', err);
    error.value = err instanceof Error ? err.message : 'Unknown error occurred';
  } finally {
    loading.value = false;
  }
};

// Handle window resize for responsiveness
const handleResize = () => {
  if (!mapContainer.value || !svgRef.value) return;
  
  updateViewBox();
  
  // Re-initialize map if data is loaded
  if (empires.value.length > 0) {
    initializeMap();
  }
};

// Ensure we have filters and patterns for medieval styling
const ensureFiltersAndPatterns = (svg: d3.Selection<SVGElement, unknown, null, undefined>) => {
  // Check if we already have a defs element
  let defs = svg.select('defs') as d3.Selection<SVGDefsElement, unknown, null, undefined>;
  if (defs.empty()) {
    defs = svg.append('defs') as d3.Selection<SVGDefsElement, unknown, null, undefined>;
  }
  
  // Create parchment pattern if it doesn't exist
  if (defs.select('#parchment-pattern').empty()) {
    const pattern = defs.append('pattern')
      .attr('id', 'parchment-pattern')
      .attr('patternUnits', 'userSpaceOnUse')
      .attr('width', 200)
      .attr('height', 200);
      
    // Parchment base
    pattern.append('rect')
      .attr('width', 200)
      .attr('height', 200)
      .attr('fill', '#f9f3e2');
      
    // Add subtle texture to the parchment
    for (let i = 0; i < 100; i++) {
      const x = Math.random() * 200;
      const y = Math.random() * 200;
      pattern.append('circle')
        .attr('cx', x)
        .attr('cy', y)
        .attr('r', Math.random() * 1.5)
        .attr('fill', '#d4c4a0')
        .attr('opacity', Math.random() * 0.3);
    }
    
    // Add subtle stains to the parchment for age effect
    for (let i = 0; i < 5; i++) {
      const x = Math.random() * 200;
      const y = Math.random() * 200;
      const size = 20 + Math.random() * 30;
      
      pattern.append('circle')
        .attr('cx', x)
        .attr('cy', y)
        .attr('r', size)
        .attr('fill', '#d4b682')
        .attr('opacity', 0.1 + Math.random() * 0.1);
    }
  }
  
  // Create a clipPath for the landmass
  if (defs.select('#landmass-clip').empty()) {
    defs.append('clipPath')
      .attr('id', 'landmass-clip');
  }
  
  // Create water pattern
  if (defs.select('#water-pattern').empty()) {
    const pattern = defs.append('pattern')
      .attr('id', 'water-pattern')
      .attr('patternUnits', 'userSpaceOnUse')
      .attr('width', 200)
      .attr('height', 200);
      
    // Water base
    pattern.append('rect')
      .attr('width', 200)
      .attr('height', 200)
      .attr('fill', '#cad9e6');
      
    // Add wave lines
    for (let i = 0; i < 10; i++) {
      const yPos = i * 20;
      pattern.append('path')
        .attr('d', `M0,${yPos + 10} Q50,${yPos} 100,${yPos + 10} T200,${yPos + 10}`)
        .attr('stroke', '#abc7de')
        .attr('stroke-width', 1.5)
        .attr('fill', 'none')
        .attr('opacity', 0.5);
    }
  }
};

// Draw the landmass on the map
const drawLandmass = (svg: d3.Selection<SVGElement, unknown, null, undefined>, width: number, height: number) => {
  // Generate the landmass shape
  const landmassPath = generateLandmass(width, height);
  
  // Check if landmass already exists
  let landmass = svg.select<SVGPathElement>('.landmass');
  
  if (landmass.empty()) {
    // Create landmass with medieval style
    const pathElement = svg.append('path')
      .attr('class', 'landmass')
      .attr('d', landmassPath)
      .attr('fill', 'url(#parchment-pattern)')
      .attr('stroke', '#8B6B4C')
      .attr('stroke-width', 3)
      .attr('filter', 'drop-shadow(3px 3px 3px rgba(0, 0, 0, 0.3))')
      .style('opacity', 0);
      
    // Add transition effect
    pathElement.transition()
      .duration(1000)
      .style('opacity', 1);
      
    landmass = svg.select<SVGPathElement>('.landmass');
    
    // Update clipPath for landmass
    svg.select('#landmass-clip')
      .append('path')
      .attr('d', landmassPath);
      
    // Add a subtle outer glow for a hand-drawn effect
    svg.append('path')
      .attr('class', 'landmass-outline')
      .attr('d', landmassPath)
      .attr('fill', 'none')
      .attr('stroke', '#5D4037')
      .attr('stroke-width', 5)
      .attr('stroke-opacity', 0.2)
      .attr('filter', 'blur(3px)');
    
    // Add a water background (the sea)
    svg.insert('rect', '.landmass')
      .attr('class', 'map-background')
      .attr('width', width)
      .attr('height', height)
      .attr('fill', 'url(#water-pattern)');
      
    // Add a compass rose to the bottom right
    const compassSize = Math.min(width, height) * 0.12;
    const compassX = width * 0.85;
    const compassY = height * 0.85;
    
    const compass = svg.append('g')
      .attr('class', 'compass')
      .attr('transform', `translate(${compassX}, ${compassY})`);
      
    // Background circle
    compass.append('circle')
      .attr('r', compassSize)
      .attr('fill', '#f9f3e2')
      .attr('stroke', '#8B6B4C')
      .attr('stroke-width', 2);
      
    // Direction lines
    const directions = [
      { angle: 0, label: 'E' },
      { angle: 90, label: 'S' },
      { angle: 180, label: 'W' },
      { angle: 270, label: 'N' }
    ];
    
    for (const dir of directions) {
      // Main direction line
      compass.append('line')
        .attr('x1', 0)
        .attr('y1', 0)
        .attr('x2', compassSize * 0.8 * Math.cos(dir.angle * Math.PI / 180))
        .attr('y2', compassSize * 0.8 * Math.sin(dir.angle * Math.PI / 180))
        .attr('stroke', '#5D4037')
        .attr('stroke-width', 2);
        
      // Direction label
      compass.append('text')
        .attr('x', compassSize * 0.9 * Math.cos(dir.angle * Math.PI / 180))
        .attr('y', compassSize * 0.9 * Math.sin(dir.angle * Math.PI / 180))
        .attr('text-anchor', 'middle')
        .attr('dominant-baseline', 'middle')
        .attr('font-family', 'serif')
        .attr('font-size', compassSize * 0.2)
        .attr('fill', '#5D4037')
        .text(dir.label);
    }
    
    // Add a decorative border to the map
    const borderWidth = 10;
    svg.append('rect')
      .attr('x', borderWidth / 2)
      .attr('y', borderWidth / 2)
      .attr('width', width - borderWidth)
      .attr('height', height - borderWidth)
      .attr('fill', 'none')
      .attr('stroke', '#8B6B4C')
      .attr('stroke-width', borderWidth)
      .attr('rx', 5)
      .attr('ry', 5);
      
    // Add some decorative elements to the corners for medieval map feel
    const corners = [
      { x: borderWidth * 2, y: borderWidth * 2 },
      { x: width - borderWidth * 2, y: borderWidth * 2 },
      { x: width - borderWidth * 2, y: height - borderWidth * 2 },
      { x: borderWidth * 2, y: height - borderWidth * 2 }
    ];
    
    for (const corner of corners) {
      svg.append('circle')
        .attr('cx', corner.x)
        .attr('cy', corner.y)
        .attr('r', borderWidth)
        .attr('fill', '#5D4037')
        .attr('stroke', '#8B6B4C')
        .attr('stroke-width', 1);
    }
  } else {
    // Update existing landmass
    landmass
      .attr('d', landmassPath);
      
    // Update clipPath for landmass
    svg.select('#landmass-clip path')
      .attr('d', landmassPath);
      
    // Update outline
    svg.select('.landmass-outline')
      .attr('d', landmassPath);
  }
  
  mapGenerated.value = true;
  return landmass;
};

// Generate Voronoi regions for territories
const generateVoronoiRegions = (width: number, height: number, numPoints: number): [number, number][] => {
  // Scale points based on economic values
  const points: [number, number][] = [];
  
  // Calculate total economic value for distribution calculations
  const totalEconomicValue = empires.value.reduce((sum, empire) => sum + (empire.total_distributed || 1), 0);
  
  // Base distribution is circular with bias toward center, but we'll adjust based on economic values
  const baseDistribution = [];
  for (let i = 0; i < numPoints; i++) {
    // Create a base point distribution in a circle
    const angle = (i / numPoints) * 2 * Math.PI;
    baseDistribution.push(angle);
  }
  
  // Sort empires by economic value (descending) so larger empires get processed first
  const sortedEmpires = [...empires.value].sort((a, b) => 
    (b.total_distributed || 0) - (a.total_distributed || 0)
  );
  
  // Larger territories are placed closer to the center for better visibility
  for (let i = 0; i < sortedEmpires.length && i < numPoints; i++) {
    const empire = sortedEmpires[i];
    const angle = baseDistribution[i];
    
    // Calculate territory size as percentage of total economy
    const economicRatio = (empire.total_distributed || 1) / totalEconomicValue;
    
    // Large territories closer to center, small ones toward edge
    // Scale distance from center inversely proportional to economic value
    const distanceFactor = 1 - (economicRatio * 0.7); // 0.3 to 1.0
    const distanceFromCenter = distanceFactor * 0.45 * Math.min(width, height);
    
    // Calculate position
    const x = width / 2 + Math.cos(angle) * distanceFromCenter;
    const y = height / 2 + Math.sin(angle) * distanceFromCenter;
    points.push([x, y]);
  }
  
  return points;
};

// Find optimal label position within territory polygon
const findOptimalLabelPosition = (
  polygon: Array<[number, number]>, 
  centroid: [number, number],
  width: number,
  height: number
): { x: number, y: number, maxWidth: number } => {
  // Start with centroid as default position
  let [x, y] = centroid;
  
  // Create a bounding box for the polygon
  let minX = width;
  let minY = height;
  let maxX = 0;
  let maxY = 0;
  
  for (const point of polygon) {
    minX = Math.min(minX, point[0]);
    minY = Math.min(minY, point[1]);
    maxX = Math.max(maxX, point[0]);
    maxY = Math.max(maxY, point[1]);
  }
  
  // Define padding and boundary constraints to keep labels fully within territories
  const padding = 15; // Increased padding from edge
  const boxWidth = maxX - minX;
  const boxHeight = maxY - minY;
  
  // Set maximum label width to prevent overlap with borders
  let maxWidth = Math.min(boxWidth - padding * 2, 120);
  
  // Ensure minimum width for very small territories
  maxWidth = Math.max(maxWidth, 40);
  
  // Check if territory is large enough for a label
  if (boxWidth >= 70 && boxHeight >= 30) {
    // Territory is big enough, use the centroid
    // But adjust to ensure we're not too close to edges
    x = Math.max(minX + padding + maxWidth/2, Math.min(maxX - padding - maxWidth/2, x));
    y = Math.max(minY + padding + 12, Math.min(maxY - padding - 12, y));
  } else {
    // For small territories, position at center
    x = minX + boxWidth/2;
    y = minY + boxHeight/2;
    
    // Smaller labels for small territories
    maxWidth = Math.min(maxWidth, boxWidth - 15);
  }
  
  // Final safety check - ensure label stays within map bounds
  const mapPadding = 15;
  x = Math.max(maxWidth/2 + mapPadding, Math.min(width - maxWidth/2 - mapPadding, x));
  y = Math.max(24 + mapPadding, Math.min(height - 24 - mapPadding, y));
  
  return { x, y, maxWidth };
};

// Calculate ideal text length for display
const getTruncatedName = (name: string, maxWidth: number): string => {
  if (!name) return 'Unknown';
  
  // Character width approximation
  const charWidth = 7; // Approximate width of each character in pixels
  
  // Calculate max characters that can fit
  const maxChars = Math.floor(maxWidth / charWidth);
  
  if (maxChars < 2) return ''; // Hide text if too small
  if (maxChars < 4) return name.substring(0, 2); // First two letters if very small
  if (name.length <= maxChars) return name; // Full name if it fits
  
  // Truncate with ellipsis
  return `${name.substring(0, maxChars - 3)}...`;
};

// Draw Voronoi regions on the map
const drawVoronoiRegions = (
  svg: d3.Selection<SVGElement, unknown, null, undefined>,
  width: number,
  height: number
) => {
  if (!empires.value.length) return;
  
  // Clear existing territories
  svg.selectAll('.territory-path').remove();
  svg.selectAll('.territory-label').remove();
  
  // Generate points for territories - one per empire
  const points = generateVoronoiRegions(width, height, empires.value.length);
  
  // Create Delaunay triangulation, then Voronoi diagram
  const delaunay = Delaunay.from(points);
  const voronoi = delaunay.voronoi([0, 0, width, height]);
  
  // Get clipPath for constraining territories to the landmass
  const clipPathId = 'landmass-clip';
  
  // Draw each territory with medieval-style borders
  const territories = svg.append('g')
    .attr('class', 'territories')
    .attr('clip-path', `url(#${clipPathId})`);
    
  // Create a separate label group (not clipped) to ensure labels are visible
  const labels = svg.append('g')
    .attr('class', 'territory-labels')
    .attr('clip-path', `url(#${clipPathId})`); // Apply clip path to keep labels inside the landmass
  
  // Color palette for territories - using earthy, muted tones suitable for medieval maps
  const colorPalette = [
    '#D5BF86', '#C8B275', '#D2B48C', '#C4AD70', 
    '#BEA36E', '#D3C8A8', '#C5B892', '#CABF9A',
    '#CEC5A7', '#D1BC8E', '#C1AE80', '#B8A27A'
  ];
  
  // Linearly interpolate between two colors
  const interpolateColor = (color1: string, color2: string, factor: number): string => {
    const r1 = Number.parseInt(color1.substring(1, 3), 16);
    const g1 = Number.parseInt(color1.substring(3, 5), 16);
    const b1 = Number.parseInt(color1.substring(5, 7), 16);
    
    const r2 = Number.parseInt(color2.substring(1, 3), 16);
    const g2 = Number.parseInt(color2.substring(3, 5), 16);
    const b2 = Number.parseInt(color2.substring(5, 7), 16);
    
    const r = Math.round(r1 + (r2 - r1) * factor);
    const g = Math.round(g1 + (g2 - g1) * factor);
    const b = Math.round(b1 + (b2 - b1) * factor);
    
    return `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
  };
  
  // Create and draw territories for each empire
  for (const [index, empire] of empires.value.entries()) {
    const cellPolygon = voronoi.cellPolygon(index);
    if (!cellPolygon) continue;
    
    // Get color from palette or use default
    const baseColor = colorPalette[index % colorPalette.length];
    
    // Adjust color slightly for variance while keeping it muted
    const variantFactor = 0.1 + Math.random() * 0.2; // Small random adjustment
    const fillColor = interpolateColor(baseColor, '#f9f3e2', variantFactor);
    
    // Calculate centroid for label placement
    const centroid = calculateCentroid(cellPolygon);
    
    // Create territory with medieval styling
    const pathData = `M${cellPolygon.join('L')}Z`;
    
    // Add the territory
    territories.append('path')
      .datum(empire)
      .attr('class', 'territory-path')
      .attr('d', pathData)
      .attr('fill', fillColor)
      .attr('stroke', '#5D4037')
      .attr('stroke-width', 2)
      .attr('stroke-opacity', 0.7)
      .attr('data-index', index)
      .on('mouseenter', () => handleRegionHover(empire, index))
      .on('mouseleave', handleTerritoryLeave);
      
    // Add a decorative icon or seal to the territory
    territories.append('circle')
      .attr('cx', centroid[0])
      .attr('cy', centroid[1])
      .attr('r', 8)
      .attr('fill', '#C09A64')
      .attr('stroke', '#5D4037')
      .attr('stroke-width', 1);
      
    // Add a simple abbreviation or symbol in the circle
    territories.append('text')
      .attr('x', centroid[0])
      .attr('y', centroid[1])
      .attr('font-family', 'serif')
      .attr('font-size', '10px')
      .attr('text-anchor', 'middle')
      .attr('dominant-baseline', 'middle')
      .attr('fill', '#5D4037')
      .text(empire.token_symbol?.substring(0, 1) || '?');
    
    // Find optimal position and size for the label
    const { x: labelX, y: labelY, maxWidth } = findOptimalLabelPosition(
      cellPolygon,
      centroid,
      width,
      height
    );
    
    // Get truncated name that fits within maxWidth
    const empireName = empire.token_name || 'Unknown Empire';
    const displayName = getTruncatedName(empireName, maxWidth);
    
    // Calculate final label width based on displayName length
    const labelWidth = Math.min(displayName.length * 7, maxWidth);
    const labelHeight = 24;

    // Create an RPG-style scroll/banner for the label - simplified for better fit
    const bannerPath = `
      M${labelX - labelWidth/2},${labelY - labelHeight/2 + 3}
      Q${labelX - labelWidth/2 + 3},${labelY - labelHeight/2} ${labelX - labelWidth/2 + 5},${labelY - labelHeight/2}
      H${labelX + labelWidth/2 - 5}
      Q${labelX + labelWidth/2 - 3},${labelY - labelHeight/2} ${labelX + labelWidth/2},${labelY - labelHeight/2 + 3}
      V${labelY + labelHeight/2 - 3}
      Q${labelX + labelWidth/2 - 3},${labelY + labelHeight/2} ${labelX + labelWidth/2 - 5},${labelY + labelHeight/2}
      H${labelX - labelWidth/2 + 5}
      Q${labelX - labelWidth/2 + 3},${labelY + labelHeight/2} ${labelX - labelWidth/2},${labelY + labelHeight/2 - 3}
      Z
    `;

    // Add banner background with RPG style
    labels.append('path')
      .attr('d', bannerPath)
      .attr('fill', '#f9f3e2')
      .attr('stroke', '#5D4037')
      .attr('stroke-width', 1.5)
      .attr('class', 'territory-label-bg')
      .attr('data-index', index)
      .on('mouseenter', () => handleRegionHover(empire, index))
      .on('mouseleave', handleTerritoryLeave);

    // Add a subtle shadow for depth
    labels.append('path')
      .attr('d', bannerPath)
      .attr('transform', 'translate(1, 1)')
      .attr('fill', 'rgba(0,0,0,0.15)')
      .attr('stroke', 'none')
      .attr('class', 'territory-label-shadow');

    // Text label with better visibility
    labels.append('text')
      .attr('x', labelX)
      .attr('y', labelY)
      .attr('font-family', 'serif')
      .attr('font-size', '12px')
      .attr('font-weight', 'bold')
      .attr('text-anchor', 'middle')
      .attr('dominant-baseline', 'middle')
      .attr('fill', '#5D4037')
      .attr('class', 'territory-label')
      .attr('data-index', index)
      .text(displayName)
      .on('mouseenter', () => handleRegionHover(empire, index))
      .on('mouseleave', handleTerritoryLeave);
  }
};

// Function to create a temporary visualization if the full map generation fails
const createTemporaryVisualization = (svg: d3.Selection<SVGElement, unknown, null, undefined>, width: number, height: number) => {
  // Clear svg
  svg.selectAll('*').remove();
  
  // Create basic circle representations for empires
  const radius = Math.min(width, height) * 0.03;
  const circleGroup = svg.append('g')
    .attr('class', 'empire-circles');
    
  // Add parchment background
  svg.append('rect')
    .attr('width', width)
    .attr('height', height)
    .attr('fill', '#f9f3e2')
    .attr('stroke', '#8B6B4C')
    .attr('stroke-width', 5);
    
  // Add a title
  svg.append('text')
    .attr('x', width / 2)
    .attr('y', 40)
    .attr('text-anchor', 'middle')
    .attr('font-family', 'serif')
    .attr('font-size', '24px')
    .attr('fill', '#5D4037')
    .text('Empire Territories');
    
  // Position circles in a circle layout
  for (const [index, empire] of empires.value.entries()) {
    const angle = (index / empires.value.length) * 2 * Math.PI;
    const cx = width / 2 + Math.cos(angle) * (width * 0.3);
    const cy = height / 2 + Math.sin(angle) * (height * 0.3);
    
    // Create circle for empire
    circleGroup.append('circle')
      .datum(empire)
      .attr('cx', cx)
      .attr('cy', cy)
      .attr('r', radius)
      .attr('fill', '#D5BF86')
      .attr('stroke', '#5D4037')
      .attr('stroke-width', 2)
      .attr('data-index', index)
      .on('mouseenter', () => handleRegionHover(empire, index))
      .on('mouseleave', handleTerritoryLeave);
      
    // Add empire name with better visibility
    const empireName = empire.token_name || 'Unknown Empire';
    const displayName = empireName.length > 15 ? `${empireName.substring(0, 13)}...` : empireName;
    
    // Text background
    circleGroup.append('rect')
      .attr('x', cx - (displayName.length * 3))
      .attr('y', cy + radius + 5)
      .attr('width', displayName.length * 6)
      .attr('height', 18)
      .attr('rx', 3)
      .attr('ry', 3)
      .attr('fill', '#f9f3e2')
      .attr('stroke', '#5D4037')
      .attr('stroke-width', 1)
      .attr('opacity', 0.9);
      
    // Text label
    circleGroup.append('text')
      .attr('x', cx)
      .attr('y', cy + radius + 15)
      .attr('text-anchor', 'middle')
      .attr('font-family', 'serif')
      .attr('font-size', '12px')
      .attr('fill', '#5D4037')
      .text(displayName);
  }
  
  // Connect to center with lines
  circleGroup.append('line')
    .attr('x1', width / 2)
    .attr('y1', height / 2)
    .attr('x2', width / 2)
    .attr('y2', height / 2)
    .attr('stroke', '#8B6B4C')
    .attr('stroke-width', 1)
    .attr('stroke-dasharray', '3,2');
  
  // Add center point
  circleGroup.append('circle')
    .attr('cx', width / 2)
    .attr('cy', height / 2)
    .attr('r', radius * 1.2)
    .attr('fill', '#C09A64')
    .attr('stroke', '#5D4037')
    .attr('stroke-width', 2);
    
  mapGenerated.value = true;
};

// Calculate centroid of a polygon
const calculateCentroid = (points: Array<[number, number]>): [number, number] => {
  if (!points.length) return [0, 0];
  
  let sumX = 0;
  let sumY = 0;
  
  for (const point of points) {
    sumX += point[0];
    sumY += point[1];
  }
  
  return [sumX / points.length, sumY / points.length];
};

// Set up theme observer for dark/light mode changes
const observer = new MutationObserver((mutations) => {
  for (const mutation of mutations) {
    if (
      mutation.attributeName === 'data-theme' &&
      svgRef.value &&
      mapContainer.value
    ) {
      // Redraw map when theme changes
      initializeMap();
    }
  }
});

// Initial setup and data loading
onMounted(() => {
  // Fetch empire data
  fetchEmpires();
  
  // Set up resize listener
  window.addEventListener('resize', handleResize);
  
  // Initialize view box
  updateViewBox();
  
  // Set up theme observer for dark/light mode changes
  const html = document.documentElement;
  observer.observe(html, { attributes: true });
  
  // Store observer for cleanup
  themeObserver.value = observer;
});

// Clean up event listeners
onBeforeUnmount(() => {
  window.removeEventListener('resize', handleResize);
  
  // Disconnect theme observer
  if (themeObserver.value) {
    themeObserver.value.disconnect();
  }
});
</script>

<style>
  .empire-map-container {
    max-width: 1200px;
    margin: 0 auto;
  }

  .territory-path {
    transition: opacity 0.3s ease, stroke-width 0.3s ease;
  }

  .territory-path:hover {
    opacity: 0.9;
    stroke-width: 3px;
  }
  
  .territory-label-bg, .territory-label {
    cursor: pointer;
    transition: filter 0.3s ease;
  }
  
  .territory-label-bg:hover, .territory-label:hover {
    filter: brightness(1.05);
  }

  .empire-info {
    z-index: 10;
    transition: all 0.3s ease;
  }

  .map-background {
    transition: fill 0.3s ease;
  }

  /* Mobile optimization */
  @media (max-width: 768px) {
    .empire-legend {
      width: 100%;
    }
    
    .empire-legend .grid {
      grid-template-columns: 1fr 1fr;
    }
    
    .hover-info {
      max-width: 250px !important;
    }
  }
</style>
</file>

<file path="package.json">
{
  "name": "empiremaps",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vue-tsc -b && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "d3": "^7.9.0",
    "d3-geo-projection": "^4.0.0",
    "d3-tile": "^1.0.0",
    "vue": "^3.5.13",
    "zod": "^3.24.3"
  },
  "devDependencies": {
    "@types/d3": "^7.4.3",
    "@vitejs/plugin-vue": "^5.2.2",
    "@vue/tsconfig": "^0.7.0",
    "autoprefixer": "^10.4.21",
    "daisyui": "^5.0.35",
    "postcss": "^8.5.3",
    "tailwindcss": "^3.4.0",
    "typescript": "~5.8.0",
    "vite": "^6.3.1",
    "vue-tsc": "^2.2.8"
  }
}
</file>

</files>
